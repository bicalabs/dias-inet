	clock_t oclock;
	ubyte *sp;
	svar32_64 l;
	udword mtxdim;
	uvar32_64 limx, limy, sum, mtxsize;
	register uvar32_64 x, y;
	register svar32_64 mx, my;

	INIT_2IMGS (1, ce_img_mtx_avg);

	isvalidf (kstp_get_int (query, 0, &mtxdim), c, kstp_errno);
	iffailedf (mtxdim > 1 && mtxdim < min (src->dimx / 4,src->dimy / 4),
	           c, "ce_img_mtx_avg: wrong matrix size");

	oclock = clock ();
	mtxsize = 4 * mtxdim * (mtxdim + 1) + 1;
	for (l = dimz - 1; l >= 0; --l) {
		psrc = src->layers[l];
		pdst = dst->layers[l];
		memset (pdst, 0, size);

		limy = dimy - mtxdim;
		psrc += mtxdim * (dimx + 1);
		pdst += mtxdim * (dimx + 1);
		for (y = mtxdim; y < limy; ++y) {
			limx = dimx - mtxdim;
			for (x = mtxdim; x < limx; ++x) {
				sp = psrc - mtxdim * (dimx + 1);
				sum = 0;
				for (my = -(sdword)mtxdim; my <= (sdword)mtxdim; ++my) {
					for (mx = -(sdword)mtxdim; mx <= (sdword)mtxdim; ++mx, ++sp)
						sum += *sp;
					sp += dimx - (mtxdim << 1) - 1;
				}

				*pdst++ = (ubyte)(sum / mtxsize);
				psrc++;
			}
			psrc += 2 * mtxdim;
			pdst += 2 * mtxdim;
		}
	}
	oclock = clock () - oclock;
	kserr_fire (c, 0, "mtx avg timing", __FILE__, oclock);

/*	for (l = dst->dimz - 1; l >= 0; --l) {
		i = size;
		psrc = src->layers[l];
		pdst = dst->layers[l];
		for (y = 0; y < dst->dimy; ++y)
			for (x = 0; x < dst->dimx; ++x) {
				if (x <= mtxdim || dst->dimx - x <= mtxdim ||
				    y <= mtxdim || dst->dimy - y <= mtxdim) {
					pdst[x + y*dst->dimx] = 0;
					continue;
				}
				sum = 0;
				for (mx = -(svar32_64)mtxdim; mx <= (svar32_64)mtxdim; ++mx)
					for (my = -(svar32_64)mtxdim; my <= (svar32_64)mtxdim; ++my)
						sum += psrc[(x + mx) + (y + my)*dst->dimx];
				pdst[x + y*dst->dimx] = (ubyte)(sum / (mtxdim * mtxdim * 4 + 2 * mtxdim + 4));
			}
	}*/
	return (true);

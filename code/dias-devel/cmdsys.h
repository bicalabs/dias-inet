#pragma once 

#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>
#using <mscorlib.dll>

// 
// This source code was auto-generated by xsd, Version=1.1.4322.573.
// 
namespace dias-devel {
    using namespace System;
    using namespace System::Data;
    using namespace System::Xml;
    using namespace System::Runtime::Serialization;
    
    using namespace System;
    public __gc class NewDataSet;
    
    
    [Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(S"code"), 
    System::Diagnostics::DebuggerStepThrough, 
    System::ComponentModel::ToolboxItem(true)]
    public __gc class NewDataSet : public System::Data::DataSet {
        public : __gc class infoDataTable;
        public : __gc class infoRow;
        public : __gc class infoRowChangeEvent;
        public : __gc class argDataTable;
        public : __gc class argRow;
        public : __gc class argRowChangeEvent;
        public : __gc class _enumDataTable;
        public : __gc class _enumRow;
        public : __gc class _enumRowChangeEvent;
        public : __gc class entryDataTable;
        public : __gc class entryRow;
        public : __gc class entryRowChangeEvent;
        public : __gc class cmdDataTable;
        public : __gc class cmdRow;
        public : __gc class cmdRowChangeEvent;
        public : __gc class class2DataTable;
        public : __gc class class2Row;
        public : __gc class class2RowChangeEvent;
        public : __gc class _classDataTable;
        public : __gc class _classRow;
        public : __gc class _classRowChangeEvent;
        public : __gc class cmdsysDataTable;
        public : __gc class cmdsysRow;
        public : __gc class cmdsysRowChangeEvent;
        
        private: dias-devel::NewDataSet::infoDataTable *  tableinfo;
        
        private: dias-devel::NewDataSet::argDataTable *  tablearg;
        
        private: dias-devel::NewDataSet::_enumDataTable *  table_enum;
        
        private: dias-devel::NewDataSet::entryDataTable *  tableentry;
        
        private: dias-devel::NewDataSet::cmdDataTable *  tablecmd;
        
        private: dias-devel::NewDataSet::class2DataTable *  tableclass2;
        
        private: dias-devel::NewDataSet::_classDataTable *  table_class;
        
        private: dias-devel::NewDataSet::cmdsysDataTable *  tablecmdsys;
        
        private: System::Data::DataRelation *  relationenum_entry;
        
        private: System::Data::DataRelation *  relationarg_enum;
        
        private: System::Data::DataRelation *  relationcmd_info;
        
        private: System::Data::DataRelation *  relationcmd_arg;
        
        private: System::Data::DataRelation *  relationclass2_cmd;
        
        private: System::Data::DataRelation *  relationclass_class2;
        
        private: System::Data::DataRelation *  relationcmdsys_class;
        
        public: NewDataSet();
        protected: NewDataSet(System::Runtime::Serialization::SerializationInfo *  info, System::Runtime::Serialization::StreamingContext context);
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property dias-devel::NewDataSet::infoDataTable *  get_info();
        
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property dias-devel::NewDataSet::argDataTable *  get_arg();
        
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property dias-devel::NewDataSet::_enumDataTable *  get__enum();
        
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property dias-devel::NewDataSet::entryDataTable *  get_entry();
        
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property dias-devel::NewDataSet::cmdDataTable *  get_cmd();
        
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property dias-devel::NewDataSet::class2DataTable *  get_class2();
        
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property dias-devel::NewDataSet::_classDataTable *  get__class();
        
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property dias-devel::NewDataSet::cmdsysDataTable *  get_cmdsys();
        
        public: virtual System::Data::DataSet *  Clone();
        
        protected: virtual System::Boolean ShouldSerializeTables();
        
        protected: virtual System::Boolean ShouldSerializeRelations();
        
        protected: virtual System::Void ReadXmlSerializable(System::Xml::XmlReader *  reader);
        
        protected: virtual System::Xml::Schema::XmlSchema *  GetSchemaSerializable();
        
        public private: System::Void InitVars();
        
        private: System::Void InitClass();
        
        private: System::Boolean ShouldSerializeinfo();
        
        private: System::Boolean ShouldSerializearg();
        
        private: System::Boolean ShouldSerialize_enum();
        
        private: System::Boolean ShouldSerializeentry();
        
        private: System::Boolean ShouldSerializecmd();
        
        private: System::Boolean ShouldSerializeclass2();
        
        private: System::Boolean ShouldSerialize_class();
        
        private: System::Boolean ShouldSerializecmdsys();
        
        private: System::Void SchemaChanged(System::Object *  sender, System::ComponentModel::CollectionChangeEventArgs *  e);
        
        public: __delegate System::Void infoRowChangeEventHandler(System::Object *  sender, dias-devel::NewDataSet::infoRowChangeEvent *  e);
        
        public: __delegate System::Void argRowChangeEventHandler(System::Object *  sender, dias-devel::NewDataSet::argRowChangeEvent *  e);
        
        public: __delegate System::Void _enumRowChangeEventHandler(System::Object *  sender, dias-devel::NewDataSet::_enumRowChangeEvent *  e);
        
        public: __delegate System::Void entryRowChangeEventHandler(System::Object *  sender, dias-devel::NewDataSet::entryRowChangeEvent *  e);
        
        public: __delegate System::Void cmdRowChangeEventHandler(System::Object *  sender, dias-devel::NewDataSet::cmdRowChangeEvent *  e);
        
        public: __delegate System::Void class2RowChangeEventHandler(System::Object *  sender, dias-devel::NewDataSet::class2RowChangeEvent *  e);
        
        public: __delegate System::Void _classRowChangeEventHandler(System::Object *  sender, dias-devel::NewDataSet::_classRowChangeEvent *  e);
        
        public: __delegate System::Void cmdsysRowChangeEventHandler(System::Object *  sender, dias-devel::NewDataSet::cmdsysRowChangeEvent *  e);
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class infoDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columndescr;
            
            private: System::Data::DataColumn *  columncopyright;
            
            private: System::Data::DataColumn *  columnsource;
            
            private: System::Data::DataColumn *  columncheck;
            
            private: System::Data::DataColumn *  columncmd_Id;
            
            public private: infoDataTable();
            public private: infoDataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_descrColumn();
            
            public private:  __property System::Data::DataColumn *  get_copyrightColumn();
            
            public private:  __property System::Data::DataColumn *  get_sourceColumn();
            
            public private:  __property System::Data::DataColumn *  get_checkColumn();
            
            public private:  __property System::Data::DataColumn *  get_cmd_IdColumn();
            
            public:  __property dias-devel::NewDataSet::infoRow *  get_Item(System::Int32 index);
            
            public: __event dias-devel::NewDataSet::infoRowChangeEventHandler *  infoRowChanged;
            
            public: __event dias-devel::NewDataSet::infoRowChangeEventHandler *  infoRowChanging;
            
            public: __event dias-devel::NewDataSet::infoRowChangeEventHandler *  infoRowDeleted;
            
            public: __event dias-devel::NewDataSet::infoRowChangeEventHandler *  infoRowDeleting;
            
            public: System::Void AddinfoRow(dias-devel::NewDataSet::infoRow *  row);
            
            public: dias-devel::NewDataSet::infoRow *  AddinfoRow(System::String *  descr, System::String *  copyright, System::String *  source, System::String *  check, dias-devel::NewDataSet::cmdRow *  parentcmdRowBycmd_info);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: dias-devel::NewDataSet::infoRow *  NewinfoRow();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void RemoveinfoRow(dias-devel::NewDataSet::infoRow *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class infoRow : public System::Data::DataRow {
            
            private: dias-devel::NewDataSet::infoDataTable *  tableinfo;
            
            public private: infoRow(System::Data::DataRowBuilder *  rb);
            public:  __property System::String *  get_descr();
            public:  __property  void set_descr(System::String *  value);
            
            public:  __property System::String *  get_copyright();
            public:  __property  void set_copyright(System::String *  value);
            
            public:  __property System::String *  get_source();
            public:  __property  void set_source(System::String *  value);
            
            public:  __property System::String *  get_check();
            public:  __property  void set_check(System::String *  value);
            
            public:  __property dias-devel::NewDataSet::cmdRow *  get_cmdRow();
            public:  __property  void set_cmdRow(dias-devel::NewDataSet::cmdRow *  value);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class infoRowChangeEvent : public System::EventArgs {
            
            private: dias-devel::NewDataSet::infoRow *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: infoRowChangeEvent(dias-devel::NewDataSet::infoRow *  row, System::Data::DataRowAction action);
            public:  __property dias-devel::NewDataSet::infoRow *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class argDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columntitle;
            
            private: System::Data::DataColumn *  columnname;
            
            private: System::Data::DataColumn *  columngentype;
            
            private: System::Data::DataColumn *  columnsubtype;
            
            private: System::Data::DataColumn *  columnmin;
            
            private: System::Data::DataColumn *  columnmax;
            
            private: System::Data::DataColumn *  column_default;
            
            private: System::Data::DataColumn *  columnarg_Id;
            
            private: System::Data::DataColumn *  columncmd_Id;
            
            public private: argDataTable();
            public private: argDataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_titleColumn();
            
            public private:  __property System::Data::DataColumn *  get_nameColumn();
            
            public private:  __property System::Data::DataColumn *  get_gentypeColumn();
            
            public private:  __property System::Data::DataColumn *  get_subtypeColumn();
            
            public private:  __property System::Data::DataColumn *  get_minColumn();
            
            public private:  __property System::Data::DataColumn *  get_maxColumn();
            
            public private:  __property System::Data::DataColumn *  get__defaultColumn();
            
            public private:  __property System::Data::DataColumn *  get_arg_IdColumn();
            
            public private:  __property System::Data::DataColumn *  get_cmd_IdColumn();
            
            public:  __property dias-devel::NewDataSet::argRow *  get_Item(System::Int32 index);
            
            public: __event dias-devel::NewDataSet::argRowChangeEventHandler *  argRowChanged;
            
            public: __event dias-devel::NewDataSet::argRowChangeEventHandler *  argRowChanging;
            
            public: __event dias-devel::NewDataSet::argRowChangeEventHandler *  argRowDeleted;
            
            public: __event dias-devel::NewDataSet::argRowChangeEventHandler *  argRowDeleting;
            
            public: System::Void AddargRow(dias-devel::NewDataSet::argRow *  row);
            
            public: dias-devel::NewDataSet::argRow *  AddargRow(System::String *  title, System::String *  name, System::String *  gentype, System::String *  subtype, System::Int32 min, System::Int32 max, System::String *  _default, dias-devel::NewDataSet::cmdRow *  parentcmdRowBycmd_arg);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: dias-devel::NewDataSet::argRow *  NewargRow();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void RemoveargRow(dias-devel::NewDataSet::argRow *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class argRow : public System::Data::DataRow {
            
            private: dias-devel::NewDataSet::argDataTable *  tablearg;
            
            public private: argRow(System::Data::DataRowBuilder *  rb);
            public:  __property System::String *  get_title();
            public:  __property  void set_title(System::String *  value);
            
            public:  __property System::String *  get_name();
            public:  __property  void set_name(System::String *  value);
            
            public:  __property System::String *  get_gentype();
            public:  __property  void set_gentype(System::String *  value);
            
            public:  __property System::String *  get_subtype();
            public:  __property  void set_subtype(System::String *  value);
            
            public:  __property System::Int32 get_min();
            public:  __property  void set_min(System::Int32 value);
            
            public:  __property System::Int32 get_max();
            public:  __property  void set_max(System::Int32 value);
            
            public:  __property System::String *  get__default();
            public:  __property  void set__default(System::String *  value);
            
            public:  __property dias-devel::NewDataSet::cmdRow *  get_cmdRow();
            public:  __property  void set_cmdRow(dias-devel::NewDataSet::cmdRow *  value);
            
            public: System::Boolean IstitleNull();
            
            public: System::Void SettitleNull();
            
            public: System::Boolean IsnameNull();
            
            public: System::Void SetnameNull();
            
            public: System::Boolean IsgentypeNull();
            
            public: System::Void SetgentypeNull();
            
            public: System::Boolean IssubtypeNull();
            
            public: System::Void SetsubtypeNull();
            
            public: System::Boolean IsminNull();
            
            public: System::Void SetminNull();
            
            public: System::Boolean IsmaxNull();
            
            public: System::Void SetmaxNull();
            
            public: System::Boolean Is_defaultNull();
            
            public: System::Void Set_defaultNull();
            
            public: dias-devel::NewDataSet::_enumRow *  GetenumRows()[];
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class argRowChangeEvent : public System::EventArgs {
            
            private: dias-devel::NewDataSet::argRow *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: argRowChangeEvent(dias-devel::NewDataSet::argRow *  row, System::Data::DataRowAction action);
            public:  __property dias-devel::NewDataSet::argRow *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class _enumDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columnenum_Id;
            
            private: System::Data::DataColumn *  columnarg_Id;
            
            public private: _enumDataTable();
            public private: _enumDataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_enum_IdColumn();
            
            public private:  __property System::Data::DataColumn *  get_arg_IdColumn();
            
            public:  __property dias-devel::NewDataSet::_enumRow *  get_Item(System::Int32 index);
            
            public: __event dias-devel::NewDataSet::_enumRowChangeEventHandler *  _enumRowChanged;
            
            public: __event dias-devel::NewDataSet::_enumRowChangeEventHandler *  _enumRowChanging;
            
            public: __event dias-devel::NewDataSet::_enumRowChangeEventHandler *  _enumRowDeleted;
            
            public: __event dias-devel::NewDataSet::_enumRowChangeEventHandler *  _enumRowDeleting;
            
            public: System::Void Add_enumRow(dias-devel::NewDataSet::_enumRow *  row);
            
            public: dias-devel::NewDataSet::_enumRow *  Add_enumRow(dias-devel::NewDataSet::argRow *  parentargRowByarg_enum);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: dias-devel::NewDataSet::_enumRow *  New_enumRow();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void Remove_enumRow(dias-devel::NewDataSet::_enumRow *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class _enumRow : public System::Data::DataRow {
            
            private: dias-devel::NewDataSet::_enumDataTable *  table_enum;
            
            public private: _enumRow(System::Data::DataRowBuilder *  rb);
            public:  __property dias-devel::NewDataSet::argRow *  get_argRow();
            public:  __property  void set_argRow(dias-devel::NewDataSet::argRow *  value);
            
            public: dias-devel::NewDataSet::entryRow *  GetentryRows()[];
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class _enumRowChangeEvent : public System::EventArgs {
            
            private: dias-devel::NewDataSet::_enumRow *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: _enumRowChangeEvent(dias-devel::NewDataSet::_enumRow *  row, System::Data::DataRowAction action);
            public:  __property dias-devel::NewDataSet::_enumRow *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class entryDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columntitle;
            
            private: System::Data::DataColumn *  columnname;
            
            private: System::Data::DataColumn *  columnval;
            
            private: System::Data::DataColumn *  columnenum_Id;
            
            public private: entryDataTable();
            public private: entryDataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_titleColumn();
            
            public private:  __property System::Data::DataColumn *  get_nameColumn();
            
            public private:  __property System::Data::DataColumn *  get_valColumn();
            
            public private:  __property System::Data::DataColumn *  get_enum_IdColumn();
            
            public:  __property dias-devel::NewDataSet::entryRow *  get_Item(System::Int32 index);
            
            public: __event dias-devel::NewDataSet::entryRowChangeEventHandler *  entryRowChanged;
            
            public: __event dias-devel::NewDataSet::entryRowChangeEventHandler *  entryRowChanging;
            
            public: __event dias-devel::NewDataSet::entryRowChangeEventHandler *  entryRowDeleted;
            
            public: __event dias-devel::NewDataSet::entryRowChangeEventHandler *  entryRowDeleting;
            
            public: System::Void AddentryRow(dias-devel::NewDataSet::entryRow *  row);
            
            public: dias-devel::NewDataSet::entryRow *  AddentryRow(System::String *  title, System::String *  name, System::Int16 val, dias-devel::NewDataSet::_enumRow *  parent_enumRowByenum_entry);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: dias-devel::NewDataSet::entryRow *  NewentryRow();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void RemoveentryRow(dias-devel::NewDataSet::entryRow *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class entryRow : public System::Data::DataRow {
            
            private: dias-devel::NewDataSet::entryDataTable *  tableentry;
            
            public private: entryRow(System::Data::DataRowBuilder *  rb);
            public:  __property System::String *  get_title();
            public:  __property  void set_title(System::String *  value);
            
            public:  __property System::String *  get_name();
            public:  __property  void set_name(System::String *  value);
            
            public:  __property System::Int16 get_val();
            public:  __property  void set_val(System::Int16 value);
            
            public:  __property dias-devel::NewDataSet::_enumRow *  get__enumRow();
            public:  __property  void set__enumRow(dias-devel::NewDataSet::_enumRow *  value);
            
            public: System::Boolean IstitleNull();
            
            public: System::Void SettitleNull();
            
            public: System::Boolean IsnameNull();
            
            public: System::Void SetnameNull();
            
            public: System::Boolean IsvalNull();
            
            public: System::Void SetvalNull();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class entryRowChangeEvent : public System::EventArgs {
            
            private: dias-devel::NewDataSet::entryRow *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: entryRowChangeEvent(dias-devel::NewDataSet::entryRow *  row, System::Data::DataRowAction action);
            public:  __property dias-devel::NewDataSet::entryRow *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class cmdDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columntitle;
            
            private: System::Data::DataColumn *  columnname;
            
            private: System::Data::DataColumn *  columncmd_Id;
            
            private: System::Data::DataColumn *  columnclass2_Id;
            
            public private: cmdDataTable();
            public private: cmdDataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_titleColumn();
            
            public private:  __property System::Data::DataColumn *  get_nameColumn();
            
            public private:  __property System::Data::DataColumn *  get_cmd_IdColumn();
            
            public private:  __property System::Data::DataColumn *  get_class2_IdColumn();
            
            public:  __property dias-devel::NewDataSet::cmdRow *  get_Item(System::Int32 index);
            
            public: __event dias-devel::NewDataSet::cmdRowChangeEventHandler *  cmdRowChanged;
            
            public: __event dias-devel::NewDataSet::cmdRowChangeEventHandler *  cmdRowChanging;
            
            public: __event dias-devel::NewDataSet::cmdRowChangeEventHandler *  cmdRowDeleted;
            
            public: __event dias-devel::NewDataSet::cmdRowChangeEventHandler *  cmdRowDeleting;
            
            public: System::Void AddcmdRow(dias-devel::NewDataSet::cmdRow *  row);
            
            public: dias-devel::NewDataSet::cmdRow *  AddcmdRow(System::String *  title, System::String *  name, dias-devel::NewDataSet::class2Row *  parentclass2RowByclass2_cmd);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: dias-devel::NewDataSet::cmdRow *  NewcmdRow();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void RemovecmdRow(dias-devel::NewDataSet::cmdRow *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class cmdRow : public System::Data::DataRow {
            
            private: dias-devel::NewDataSet::cmdDataTable *  tablecmd;
            
            public private: cmdRow(System::Data::DataRowBuilder *  rb);
            public:  __property System::String *  get_title();
            public:  __property  void set_title(System::String *  value);
            
            public:  __property System::String *  get_name();
            public:  __property  void set_name(System::String *  value);
            
            public:  __property dias-devel::NewDataSet::class2Row *  get_class2Row();
            public:  __property  void set_class2Row(dias-devel::NewDataSet::class2Row *  value);
            
            public: System::Boolean IstitleNull();
            
            public: System::Void SettitleNull();
            
            public: System::Boolean IsnameNull();
            
            public: System::Void SetnameNull();
            
            public: dias-devel::NewDataSet::infoRow *  GetinfoRows()[];
            
            public: dias-devel::NewDataSet::argRow *  GetargRows()[];
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class cmdRowChangeEvent : public System::EventArgs {
            
            private: dias-devel::NewDataSet::cmdRow *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: cmdRowChangeEvent(dias-devel::NewDataSet::cmdRow *  row, System::Data::DataRowAction action);
            public:  __property dias-devel::NewDataSet::cmdRow *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class class2DataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columntitle;
            
            private: System::Data::DataColumn *  columnname;
            
            private: System::Data::DataColumn *  columnclass2_Id;
            
            private: System::Data::DataColumn *  columnclass_Id;
            
            public private: class2DataTable();
            public private: class2DataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_titleColumn();
            
            public private:  __property System::Data::DataColumn *  get_nameColumn();
            
            public private:  __property System::Data::DataColumn *  get_class2_IdColumn();
            
            public private:  __property System::Data::DataColumn *  get_class_IdColumn();
            
            public:  __property dias-devel::NewDataSet::class2Row *  get_Item(System::Int32 index);
            
            public: __event dias-devel::NewDataSet::class2RowChangeEventHandler *  class2RowChanged;
            
            public: __event dias-devel::NewDataSet::class2RowChangeEventHandler *  class2RowChanging;
            
            public: __event dias-devel::NewDataSet::class2RowChangeEventHandler *  class2RowDeleted;
            
            public: __event dias-devel::NewDataSet::class2RowChangeEventHandler *  class2RowDeleting;
            
            public: System::Void Addclass2Row(dias-devel::NewDataSet::class2Row *  row);
            
            public: dias-devel::NewDataSet::class2Row *  Addclass2Row(System::String *  title, System::String *  name, dias-devel::NewDataSet::_classRow *  parent_classRowByclass_class2);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: dias-devel::NewDataSet::class2Row *  Newclass2Row();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void Removeclass2Row(dias-devel::NewDataSet::class2Row *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class class2Row : public System::Data::DataRow {
            
            private: dias-devel::NewDataSet::class2DataTable *  tableclass2;
            
            public private: class2Row(System::Data::DataRowBuilder *  rb);
            public:  __property System::String *  get_title();
            public:  __property  void set_title(System::String *  value);
            
            public:  __property System::String *  get_name();
            public:  __property  void set_name(System::String *  value);
            
            public:  __property dias-devel::NewDataSet::_classRow *  get__classRow();
            public:  __property  void set__classRow(dias-devel::NewDataSet::_classRow *  value);
            
            public: System::Boolean IstitleNull();
            
            public: System::Void SettitleNull();
            
            public: System::Boolean IsnameNull();
            
            public: System::Void SetnameNull();
            
            public: dias-devel::NewDataSet::cmdRow *  GetcmdRows()[];
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class class2RowChangeEvent : public System::EventArgs {
            
            private: dias-devel::NewDataSet::class2Row *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: class2RowChangeEvent(dias-devel::NewDataSet::class2Row *  row, System::Data::DataRowAction action);
            public:  __property dias-devel::NewDataSet::class2Row *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class _classDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columntitle;
            
            private: System::Data::DataColumn *  columnname;
            
            private: System::Data::DataColumn *  columnclass_Id;
            
            private: System::Data::DataColumn *  columncmdsys_Id;
            
            public private: _classDataTable();
            public private: _classDataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_titleColumn();
            
            public private:  __property System::Data::DataColumn *  get_nameColumn();
            
            public private:  __property System::Data::DataColumn *  get_class_IdColumn();
            
            public private:  __property System::Data::DataColumn *  get_cmdsys_IdColumn();
            
            public:  __property dias-devel::NewDataSet::_classRow *  get_Item(System::Int32 index);
            
            public: __event dias-devel::NewDataSet::_classRowChangeEventHandler *  _classRowChanged;
            
            public: __event dias-devel::NewDataSet::_classRowChangeEventHandler *  _classRowChanging;
            
            public: __event dias-devel::NewDataSet::_classRowChangeEventHandler *  _classRowDeleted;
            
            public: __event dias-devel::NewDataSet::_classRowChangeEventHandler *  _classRowDeleting;
            
            public: System::Void Add_classRow(dias-devel::NewDataSet::_classRow *  row);
            
            public: dias-devel::NewDataSet::_classRow *  Add_classRow(System::String *  title, System::String *  name, dias-devel::NewDataSet::cmdsysRow *  parentcmdsysRowBycmdsys_class);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: dias-devel::NewDataSet::_classRow *  New_classRow();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void Remove_classRow(dias-devel::NewDataSet::_classRow *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class _classRow : public System::Data::DataRow {
            
            private: dias-devel::NewDataSet::_classDataTable *  table_class;
            
            public private: _classRow(System::Data::DataRowBuilder *  rb);
            public:  __property System::String *  get_title();
            public:  __property  void set_title(System::String *  value);
            
            public:  __property System::String *  get_name();
            public:  __property  void set_name(System::String *  value);
            
            public:  __property dias-devel::NewDataSet::cmdsysRow *  get_cmdsysRow();
            public:  __property  void set_cmdsysRow(dias-devel::NewDataSet::cmdsysRow *  value);
            
            public: System::Boolean IstitleNull();
            
            public: System::Void SettitleNull();
            
            public: System::Boolean IsnameNull();
            
            public: System::Void SetnameNull();
            
            public: dias-devel::NewDataSet::class2Row *  Getclass2Rows()[];
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class _classRowChangeEvent : public System::EventArgs {
            
            private: dias-devel::NewDataSet::_classRow *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: _classRowChangeEvent(dias-devel::NewDataSet::_classRow *  row, System::Data::DataRowAction action);
            public:  __property dias-devel::NewDataSet::_classRow *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class cmdsysDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columnsystem;
            
            private: System::Data::DataColumn *  columnversion;
            
            private: System::Data::DataColumn *  columncmdsys_Id;
            
            public private: cmdsysDataTable();
            public private: cmdsysDataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_systemColumn();
            
            public private:  __property System::Data::DataColumn *  get_versionColumn();
            
            public private:  __property System::Data::DataColumn *  get_cmdsys_IdColumn();
            
            public:  __property dias-devel::NewDataSet::cmdsysRow *  get_Item(System::Int32 index);
            
            public: __event dias-devel::NewDataSet::cmdsysRowChangeEventHandler *  cmdsysRowChanged;
            
            public: __event dias-devel::NewDataSet::cmdsysRowChangeEventHandler *  cmdsysRowChanging;
            
            public: __event dias-devel::NewDataSet::cmdsysRowChangeEventHandler *  cmdsysRowDeleted;
            
            public: __event dias-devel::NewDataSet::cmdsysRowChangeEventHandler *  cmdsysRowDeleting;
            
            public: System::Void AddcmdsysRow(dias-devel::NewDataSet::cmdsysRow *  row);
            
            public: dias-devel::NewDataSet::cmdsysRow *  AddcmdsysRow(System::String *  system, System::Int16 version);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: dias-devel::NewDataSet::cmdsysRow *  NewcmdsysRow();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void RemovecmdsysRow(dias-devel::NewDataSet::cmdsysRow *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class cmdsysRow : public System::Data::DataRow {
            
            private: dias-devel::NewDataSet::cmdsysDataTable *  tablecmdsys;
            
            public private: cmdsysRow(System::Data::DataRowBuilder *  rb);
            public:  __property System::String *  get_system();
            public:  __property  void set_system(System::String *  value);
            
            public:  __property System::Int16 get_version();
            public:  __property  void set_version(System::Int16 value);
            
            public: System::Boolean IssystemNull();
            
            public: System::Void SetsystemNull();
            
            public: System::Boolean IsversionNull();
            
            public: System::Void SetversionNull();
            
            public: dias-devel::NewDataSet::_classRow *  GetclassRows()[];
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class cmdsysRowChangeEvent : public System::EventArgs {
            
            private: dias-devel::NewDataSet::cmdsysRow *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: cmdsysRowChangeEvent(dias-devel::NewDataSet::cmdsysRow *  row, System::Data::DataRowAction action);
            public:  __property dias-devel::NewDataSet::cmdsysRow *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        };
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    inline NewDataSet::NewDataSet() {
        this->InitClass();
        System::ComponentModel::CollectionChangeEventHandler *  schemaChangedHandler = new System::ComponentModel::CollectionChangeEventHandler(this, SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline NewDataSet::NewDataSet(System::Runtime::Serialization::SerializationInfo *  info, System::Runtime::Serialization::StreamingContext context) {
        System::String *  strSchema = (__try_cast<System::String *  >(info->GetValue(S"XmlSchema", __typeof(System::String))));
        if ((strSchema != 0)) {
            System::Data::DataSet *  ds = new System::Data::DataSet();
            ds->ReadXmlSchema(new System::Xml::XmlTextReader(new System::IO::StringReader(strSchema)));
            if ((ds->Tables->Item[S"info"] != 0)) {
                this->Tables->Add(new dias-devel::NewDataSet::infoDataTable(ds->Tables->Item[S"info"]));
            }
            if ((ds->Tables->Item[S"arg"] != 0)) {
                this->Tables->Add(new dias-devel::NewDataSet::argDataTable(ds->Tables->Item[S"arg"]));
            }
            if ((ds->Tables->Item[S"enum"] != 0)) {
                this->Tables->Add(new dias-devel::NewDataSet::_enumDataTable(ds->Tables->Item[S"enum"]));
            }
            if ((ds->Tables->Item[S"entry"] != 0)) {
                this->Tables->Add(new dias-devel::NewDataSet::entryDataTable(ds->Tables->Item[S"entry"]));
            }
            if ((ds->Tables->Item[S"cmd"] != 0)) {
                this->Tables->Add(new dias-devel::NewDataSet::cmdDataTable(ds->Tables->Item[S"cmd"]));
            }
            if ((ds->Tables->Item[S"class2"] != 0)) {
                this->Tables->Add(new dias-devel::NewDataSet::class2DataTable(ds->Tables->Item[S"class2"]));
            }
            if ((ds->Tables->Item[S"class"] != 0)) {
                this->Tables->Add(new dias-devel::NewDataSet::_classDataTable(ds->Tables->Item[S"class"]));
            }
            if ((ds->Tables->Item[S"cmdsys"] != 0)) {
                this->Tables->Add(new dias-devel::NewDataSet::cmdsysDataTable(ds->Tables->Item[S"cmdsys"]));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->InitClass();
        }
        this->GetSerializationData(info, context);
        System::ComponentModel::CollectionChangeEventHandler *  schemaChangedHandler = new System::ComponentModel::CollectionChangeEventHandler(this, SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline dias-devel::NewDataSet::infoDataTable *  NewDataSet::get_info() {
        return this->tableinfo;
    }
    
    inline dias-devel::NewDataSet::argDataTable *  NewDataSet::get_arg() {
        return this->tablearg;
    }
    
    inline dias-devel::NewDataSet::_enumDataTable *  NewDataSet::get__enum() {
        return this->table_enum;
    }
    
    inline dias-devel::NewDataSet::entryDataTable *  NewDataSet::get_entry() {
        return this->tableentry;
    }
    
    inline dias-devel::NewDataSet::cmdDataTable *  NewDataSet::get_cmd() {
        return this->tablecmd;
    }
    
    inline dias-devel::NewDataSet::class2DataTable *  NewDataSet::get_class2() {
        return this->tableclass2;
    }
    
    inline dias-devel::NewDataSet::_classDataTable *  NewDataSet::get__class() {
        return this->table_class;
    }
    
    inline dias-devel::NewDataSet::cmdsysDataTable *  NewDataSet::get_cmdsys() {
        return this->tablecmdsys;
    }
    
    inline System::Data::DataSet *  NewDataSet::Clone() {
        dias-devel::NewDataSet *  cln = (__try_cast<dias-devel::NewDataSet *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    };
    
    inline System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    };
    
    inline System::Void NewDataSet::ReadXmlSerializable(System::Xml::XmlReader *  reader) {
        this->Reset();
        System::Data::DataSet *  ds = new System::Data::DataSet();
        ds->ReadXml(reader);
        if ((ds->Tables->Item[S"info"] != 0)) {
            this->Tables->Add(new dias-devel::NewDataSet::infoDataTable(ds->Tables->Item[S"info"]));
        }
        if ((ds->Tables->Item[S"arg"] != 0)) {
            this->Tables->Add(new dias-devel::NewDataSet::argDataTable(ds->Tables->Item[S"arg"]));
        }
        if ((ds->Tables->Item[S"enum"] != 0)) {
            this->Tables->Add(new dias-devel::NewDataSet::_enumDataTable(ds->Tables->Item[S"enum"]));
        }
        if ((ds->Tables->Item[S"entry"] != 0)) {
            this->Tables->Add(new dias-devel::NewDataSet::entryDataTable(ds->Tables->Item[S"entry"]));
        }
        if ((ds->Tables->Item[S"cmd"] != 0)) {
            this->Tables->Add(new dias-devel::NewDataSet::cmdDataTable(ds->Tables->Item[S"cmd"]));
        }
        if ((ds->Tables->Item[S"class2"] != 0)) {
            this->Tables->Add(new dias-devel::NewDataSet::class2DataTable(ds->Tables->Item[S"class2"]));
        }
        if ((ds->Tables->Item[S"class"] != 0)) {
            this->Tables->Add(new dias-devel::NewDataSet::_classDataTable(ds->Tables->Item[S"class"]));
        }
        if ((ds->Tables->Item[S"cmdsys"] != 0)) {
            this->Tables->Add(new dias-devel::NewDataSet::cmdsysDataTable(ds->Tables->Item[S"cmdsys"]));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
        this->InitVars();
    };
    
    inline System::Xml::Schema::XmlSchema *  NewDataSet::GetSchemaSerializable() {
        System::IO::MemoryStream *  stream = new System::IO::MemoryStream();
        this->WriteXmlSchema(new System::Xml::XmlTextWriter(stream, 0));
        stream->Position = 0;
        return System::Xml::Schema::XmlSchema::Read(new System::Xml::XmlTextReader(stream), 0);
    };
    
    inline System::Void NewDataSet::InitVars() {
        this->tableinfo = (__try_cast<dias-devel::NewDataSet::infoDataTable *  >(this->Tables->Item[S"info"]));
        if ((this->tableinfo != 0)) {
            this->tableinfo->InitVars();
        }
        this->tablearg = (__try_cast<dias-devel::NewDataSet::argDataTable *  >(this->Tables->Item[S"arg"]));
        if ((this->tablearg != 0)) {
            this->tablearg->InitVars();
        }
        this->table_enum = (__try_cast<dias-devel::NewDataSet::_enumDataTable *  >(this->Tables->Item[S"enum"]));
        if ((this->table_enum != 0)) {
            this->table_enum->InitVars();
        }
        this->tableentry = (__try_cast<dias-devel::NewDataSet::entryDataTable *  >(this->Tables->Item[S"entry"]));
        if ((this->tableentry != 0)) {
            this->tableentry->InitVars();
        }
        this->tablecmd = (__try_cast<dias-devel::NewDataSet::cmdDataTable *  >(this->Tables->Item[S"cmd"]));
        if ((this->tablecmd != 0)) {
            this->tablecmd->InitVars();
        }
        this->tableclass2 = (__try_cast<dias-devel::NewDataSet::class2DataTable *  >(this->Tables->Item[S"class2"]));
        if ((this->tableclass2 != 0)) {
            this->tableclass2->InitVars();
        }
        this->table_class = (__try_cast<dias-devel::NewDataSet::_classDataTable *  >(this->Tables->Item[S"class"]));
        if ((this->table_class != 0)) {
            this->table_class->InitVars();
        }
        this->tablecmdsys = (__try_cast<dias-devel::NewDataSet::cmdsysDataTable *  >(this->Tables->Item[S"cmdsys"]));
        if ((this->tablecmdsys != 0)) {
            this->tablecmdsys->InitVars();
        }
        this->relationenum_entry = this->Relations->Item[S"enum_entry"];
        this->relationarg_enum = this->Relations->Item[S"arg_enum"];
        this->relationcmd_info = this->Relations->Item[S"cmd_info"];
        this->relationcmd_arg = this->Relations->Item[S"cmd_arg"];
        this->relationclass2_cmd = this->Relations->Item[S"class2_cmd"];
        this->relationclass_class2 = this->Relations->Item[S"class_class2"];
        this->relationcmdsys_class = this->Relations->Item[S"cmdsys_class"];
    };
    
    inline System::Void NewDataSet::InitClass() {
        this->DataSetName = S"NewDataSet";
        this->Prefix = S"";
        this->Namespace = S"http://tempuri.org/ks-cmdsys.xsd";
        this->Locale = new System::Globalization::CultureInfo(S"ru-RU");
        this->CaseSensitive = false;
        this->EnforceConstraints = true;
        this->tableinfo = new dias-devel::NewDataSet::infoDataTable();
        this->Tables->Add(this->tableinfo);
        this->tablearg = new dias-devel::NewDataSet::argDataTable();
        this->Tables->Add(this->tablearg);
        this->table_enum = new dias-devel::NewDataSet::_enumDataTable();
        this->Tables->Add(this->table_enum);
        this->tableentry = new dias-devel::NewDataSet::entryDataTable();
        this->Tables->Add(this->tableentry);
        this->tablecmd = new dias-devel::NewDataSet::cmdDataTable();
        this->Tables->Add(this->tablecmd);
        this->tableclass2 = new dias-devel::NewDataSet::class2DataTable();
        this->Tables->Add(this->tableclass2);
        this->table_class = new dias-devel::NewDataSet::_classDataTable();
        this->Tables->Add(this->table_class);
        this->tablecmdsys = new dias-devel::NewDataSet::cmdsysDataTable();
        this->Tables->Add(this->tablecmdsys);
        System::Data::ForeignKeyConstraint *  fkc;
        System::Data::DataColumn* __mcTemp__1[] = new System::Data::DataColumn*[1];
                        __mcTemp__1[0] = this->tablecmd->cmd_IdColumn;
            System::Data::DataColumn* __mcTemp__2[] = new System::Data::DataColumn*[1];
                        __mcTemp__2[0] = this->tableinfo->cmd_IdColumn;
        fkc = new System::Data::ForeignKeyConstraint(S"cmd_info", __mcTemp__1, __mcTemp__2);
        this->tableinfo->Constraints->Add(fkc);
        fkc->AcceptRejectRule = System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = System::Data::Rule::Cascade;
        fkc->UpdateRule = System::Data::Rule::Cascade;
        System::Data::DataColumn* __mcTemp__3[] = new System::Data::DataColumn*[1];
                        __mcTemp__3[0] = this->tablecmd->cmd_IdColumn;
            System::Data::DataColumn* __mcTemp__4[] = new System::Data::DataColumn*[1];
                        __mcTemp__4[0] = this->tablearg->cmd_IdColumn;
        fkc = new System::Data::ForeignKeyConstraint(S"cmd_arg", __mcTemp__3, __mcTemp__4);
        this->tablearg->Constraints->Add(fkc);
        fkc->AcceptRejectRule = System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = System::Data::Rule::Cascade;
        fkc->UpdateRule = System::Data::Rule::Cascade;
        System::Data::DataColumn* __mcTemp__5[] = new System::Data::DataColumn*[1];
                        __mcTemp__5[0] = this->tablearg->arg_IdColumn;
            System::Data::DataColumn* __mcTemp__6[] = new System::Data::DataColumn*[1];
                        __mcTemp__6[0] = this->table_enum->arg_IdColumn;
        fkc = new System::Data::ForeignKeyConstraint(S"arg_enum", __mcTemp__5, __mcTemp__6);
        this->table_enum->Constraints->Add(fkc);
        fkc->AcceptRejectRule = System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = System::Data::Rule::Cascade;
        fkc->UpdateRule = System::Data::Rule::Cascade;
        System::Data::DataColumn* __mcTemp__7[] = new System::Data::DataColumn*[1];
                        __mcTemp__7[0] = this->table_enum->enum_IdColumn;
            System::Data::DataColumn* __mcTemp__8[] = new System::Data::DataColumn*[1];
                        __mcTemp__8[0] = this->tableentry->enum_IdColumn;
        fkc = new System::Data::ForeignKeyConstraint(S"enum_entry", __mcTemp__7, __mcTemp__8);
        this->tableentry->Constraints->Add(fkc);
        fkc->AcceptRejectRule = System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = System::Data::Rule::Cascade;
        fkc->UpdateRule = System::Data::Rule::Cascade;
        System::Data::DataColumn* __mcTemp__9[] = new System::Data::DataColumn*[1];
                        __mcTemp__9[0] = this->tableclass2->class2_IdColumn;
            System::Data::DataColumn* __mcTemp__10[] = new System::Data::DataColumn*[1];
                        __mcTemp__10[0] = this->tablecmd->class2_IdColumn;
        fkc = new System::Data::ForeignKeyConstraint(S"class2_cmd", __mcTemp__9, __mcTemp__10);
        this->tablecmd->Constraints->Add(fkc);
        fkc->AcceptRejectRule = System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = System::Data::Rule::Cascade;
        fkc->UpdateRule = System::Data::Rule::Cascade;
        System::Data::DataColumn* __mcTemp__11[] = new System::Data::DataColumn*[1];
                        __mcTemp__11[0] = this->table_class->class_IdColumn;
            System::Data::DataColumn* __mcTemp__12[] = new System::Data::DataColumn*[1];
                        __mcTemp__12[0] = this->tableclass2->class_IdColumn;
        fkc = new System::Data::ForeignKeyConstraint(S"class_class2", __mcTemp__11, __mcTemp__12);
        this->tableclass2->Constraints->Add(fkc);
        fkc->AcceptRejectRule = System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = System::Data::Rule::Cascade;
        fkc->UpdateRule = System::Data::Rule::Cascade;
        System::Data::DataColumn* __mcTemp__13[] = new System::Data::DataColumn*[1];
                        __mcTemp__13[0] = this->tablecmdsys->cmdsys_IdColumn;
            System::Data::DataColumn* __mcTemp__14[] = new System::Data::DataColumn*[1];
                        __mcTemp__14[0] = this->table_class->cmdsys_IdColumn;
        fkc = new System::Data::ForeignKeyConstraint(S"cmdsys_class", __mcTemp__13, __mcTemp__14);
        this->table_class->Constraints->Add(fkc);
        fkc->AcceptRejectRule = System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = System::Data::Rule::Cascade;
        fkc->UpdateRule = System::Data::Rule::Cascade;
        System::Data::DataColumn* __mcTemp__15[] = new System::Data::DataColumn*[1];
                        __mcTemp__15[0] = this->table_enum->enum_IdColumn;
            System::Data::DataColumn* __mcTemp__16[] = new System::Data::DataColumn*[1];
                        __mcTemp__16[0] = this->tableentry->enum_IdColumn;
        this->relationenum_entry = new System::Data::DataRelation(S"enum_entry", __mcTemp__15, __mcTemp__16, false);
        this->relationenum_entry->Nested = true;
        this->Relations->Add(this->relationenum_entry);
        System::Data::DataColumn* __mcTemp__17[] = new System::Data::DataColumn*[1];
                        __mcTemp__17[0] = this->tablearg->arg_IdColumn;
            System::Data::DataColumn* __mcTemp__18[] = new System::Data::DataColumn*[1];
                        __mcTemp__18[0] = this->table_enum->arg_IdColumn;
        this->relationarg_enum = new System::Data::DataRelation(S"arg_enum", __mcTemp__17, __mcTemp__18, false);
        this->relationarg_enum->Nested = true;
        this->Relations->Add(this->relationarg_enum);
        System::Data::DataColumn* __mcTemp__19[] = new System::Data::DataColumn*[1];
                        __mcTemp__19[0] = this->tablecmd->cmd_IdColumn;
            System::Data::DataColumn* __mcTemp__20[] = new System::Data::DataColumn*[1];
                        __mcTemp__20[0] = this->tableinfo->cmd_IdColumn;
        this->relationcmd_info = new System::Data::DataRelation(S"cmd_info", __mcTemp__19, __mcTemp__20, false);
        this->relationcmd_info->Nested = true;
        this->Relations->Add(this->relationcmd_info);
        System::Data::DataColumn* __mcTemp__21[] = new System::Data::DataColumn*[1];
                        __mcTemp__21[0] = this->tablecmd->cmd_IdColumn;
            System::Data::DataColumn* __mcTemp__22[] = new System::Data::DataColumn*[1];
                        __mcTemp__22[0] = this->tablearg->cmd_IdColumn;
        this->relationcmd_arg = new System::Data::DataRelation(S"cmd_arg", __mcTemp__21, __mcTemp__22, false);
        this->relationcmd_arg->Nested = true;
        this->Relations->Add(this->relationcmd_arg);
        System::Data::DataColumn* __mcTemp__23[] = new System::Data::DataColumn*[1];
                        __mcTemp__23[0] = this->tableclass2->class2_IdColumn;
            System::Data::DataColumn* __mcTemp__24[] = new System::Data::DataColumn*[1];
                        __mcTemp__24[0] = this->tablecmd->class2_IdColumn;
        this->relationclass2_cmd = new System::Data::DataRelation(S"class2_cmd", __mcTemp__23, __mcTemp__24, false);
        this->relationclass2_cmd->Nested = true;
        this->Relations->Add(this->relationclass2_cmd);
        System::Data::DataColumn* __mcTemp__25[] = new System::Data::DataColumn*[1];
                        __mcTemp__25[0] = this->table_class->class_IdColumn;
            System::Data::DataColumn* __mcTemp__26[] = new System::Data::DataColumn*[1];
                        __mcTemp__26[0] = this->tableclass2->class_IdColumn;
        this->relationclass_class2 = new System::Data::DataRelation(S"class_class2", __mcTemp__25, __mcTemp__26, false);
        this->relationclass_class2->Nested = true;
        this->Relations->Add(this->relationclass_class2);
        System::Data::DataColumn* __mcTemp__27[] = new System::Data::DataColumn*[1];
                        __mcTemp__27[0] = this->tablecmdsys->cmdsys_IdColumn;
            System::Data::DataColumn* __mcTemp__28[] = new System::Data::DataColumn*[1];
                        __mcTemp__28[0] = this->table_class->cmdsys_IdColumn;
        this->relationcmdsys_class = new System::Data::DataRelation(S"cmdsys_class", __mcTemp__27, __mcTemp__28, false);
        this->relationcmdsys_class->Nested = true;
        this->Relations->Add(this->relationcmdsys_class);
    };
    
    inline System::Boolean NewDataSet::ShouldSerializeinfo() {
        return false;
    };
    
    inline System::Boolean NewDataSet::ShouldSerializearg() {
        return false;
    };
    
    inline System::Boolean NewDataSet::ShouldSerialize_enum() {
        return false;
    };
    
    inline System::Boolean NewDataSet::ShouldSerializeentry() {
        return false;
    };
    
    inline System::Boolean NewDataSet::ShouldSerializecmd() {
        return false;
    };
    
    inline System::Boolean NewDataSet::ShouldSerializeclass2() {
        return false;
    };
    
    inline System::Boolean NewDataSet::ShouldSerialize_class() {
        return false;
    };
    
    inline System::Boolean NewDataSet::ShouldSerializecmdsys() {
        return false;
    };
    
    inline System::Void NewDataSet::SchemaChanged(System::Object *  sender, System::ComponentModel::CollectionChangeEventArgs *  e) {
        if ((e->Action == System::ComponentModel::CollectionChangeAction::Remove)) {
            this->InitVars();
        }
    };
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    inline NewDataSet::infoDataTable::infoDataTable() : 
            DataTable(S"info") {
        this->InitClass();
    }
    
    inline NewDataSet::infoDataTable::infoDataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 NewDataSet::infoDataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  NewDataSet::infoDataTable::get_descrColumn() {
        return this->columndescr;
    }
    
    inline System::Data::DataColumn *  NewDataSet::infoDataTable::get_copyrightColumn() {
        return this->columncopyright;
    }
    
    inline System::Data::DataColumn *  NewDataSet::infoDataTable::get_sourceColumn() {
        return this->columnsource;
    }
    
    inline System::Data::DataColumn *  NewDataSet::infoDataTable::get_checkColumn() {
        return this->columncheck;
    }
    
    inline System::Data::DataColumn *  NewDataSet::infoDataTable::get_cmd_IdColumn() {
        return this->columncmd_Id;
    }
    
    inline dias-devel::NewDataSet::infoRow *  NewDataSet::infoDataTable::get_Item(System::Int32 index) {
        return (__try_cast<dias-devel::NewDataSet::infoRow *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void NewDataSet::infoDataTable::AddinfoRow(dias-devel::NewDataSet::infoRow *  row) {
        this->Rows->Add(row);
    };
    
    inline dias-devel::NewDataSet::infoRow *  NewDataSet::infoDataTable::AddinfoRow(System::String *  descr, System::String *  copyright, System::String *  source, System::String *  check, dias-devel::NewDataSet::cmdRow *  parentcmdRowBycmd_info) {
        dias-devel::NewDataSet::infoRow *  rowinfoRow = (__try_cast<dias-devel::NewDataSet::infoRow *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[5];
                __mcTemp__1[0] = descr;
                __mcTemp__1[1] = copyright;
                __mcTemp__1[2] = source;
                __mcTemp__1[3] = check;
                __mcTemp__1[4] = parentcmdRowBycmd_info->Item[2];
        rowinfoRow->ItemArray = __mcTemp__1;
        this->Rows->Add(rowinfoRow);
        return rowinfoRow;
    };
    
    inline System::Collections::IEnumerator *  NewDataSet::infoDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  NewDataSet::infoDataTable::Clone() {
        dias-devel::NewDataSet::infoDataTable *  cln = (__try_cast<dias-devel::NewDataSet::infoDataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  NewDataSet::infoDataTable::CreateInstance() {
        return new dias-devel::NewDataSet::infoDataTable();
    };
    
    inline System::Void NewDataSet::infoDataTable::InitVars() {
        this->columndescr = this->Columns->Item[S"descr"];
        this->columncopyright = this->Columns->Item[S"copyright"];
        this->columnsource = this->Columns->Item[S"source"];
        this->columncheck = this->Columns->Item[S"check"];
        this->columncmd_Id = this->Columns->Item[S"cmd_Id"];
    };
    
    inline System::Void NewDataSet::infoDataTable::InitClass() {
        this->columndescr = new System::Data::DataColumn(S"descr", __typeof(System::String), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columndescr);
        this->columncopyright = new System::Data::DataColumn(S"copyright", __typeof(System::String), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columncopyright);
        this->columnsource = new System::Data::DataColumn(S"source", __typeof(System::String), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columnsource);
        this->columncheck = new System::Data::DataColumn(S"check", __typeof(System::String), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columncheck);
        this->columncmd_Id = new System::Data::DataColumn(S"cmd_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columncmd_Id);
        this->columndescr->AllowDBNull = false;
        this->columncopyright->AllowDBNull = false;
        this->columnsource->AllowDBNull = false;
        this->columncheck->AllowDBNull = false;
    };
    
    inline dias-devel::NewDataSet::infoRow *  NewDataSet::infoDataTable::NewinfoRow() {
        return (__try_cast<dias-devel::NewDataSet::infoRow *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  NewDataSet::infoDataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new dias-devel::NewDataSet::infoRow(builder);
    };
    
    inline System::Type *  NewDataSet::infoDataTable::GetRowType() {
        return __typeof(dias-devel::NewDataSet::infoRow);
    };
    
    inline System::Void NewDataSet::infoDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->infoRowChanged != 0)) {
            this->infoRowChanged(this, new dias-devel::NewDataSet::infoRowChangeEvent((__try_cast<dias-devel::NewDataSet::infoRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::infoDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->infoRowChanging != 0)) {
            this->infoRowChanging(this, new dias-devel::NewDataSet::infoRowChangeEvent((__try_cast<dias-devel::NewDataSet::infoRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::infoDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->infoRowDeleted != 0)) {
            this->infoRowDeleted(this, new dias-devel::NewDataSet::infoRowChangeEvent((__try_cast<dias-devel::NewDataSet::infoRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::infoDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->infoRowDeleting != 0)) {
            this->infoRowDeleting(this, new dias-devel::NewDataSet::infoRowChangeEvent((__try_cast<dias-devel::NewDataSet::infoRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::infoDataTable::RemoveinfoRow(dias-devel::NewDataSet::infoRow *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline NewDataSet::infoRow::infoRow(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->tableinfo = (__try_cast<dias-devel::NewDataSet::infoDataTable *  >(this->Table));
    }
    
    inline System::String *  NewDataSet::infoRow::get_descr() {
        return (__try_cast<System::String *  >(this->Item[this->tableinfo->descrColumn]));
    }
    inline void NewDataSet::infoRow::set_descr(System::String *  value) {
        this->Item[this->tableinfo->descrColumn] = value;
    }
    
    inline System::String *  NewDataSet::infoRow::get_copyright() {
        return (__try_cast<System::String *  >(this->Item[this->tableinfo->copyrightColumn]));
    }
    inline void NewDataSet::infoRow::set_copyright(System::String *  value) {
        this->Item[this->tableinfo->copyrightColumn] = value;
    }
    
    inline System::String *  NewDataSet::infoRow::get_source() {
        return (__try_cast<System::String *  >(this->Item[this->tableinfo->sourceColumn]));
    }
    inline void NewDataSet::infoRow::set_source(System::String *  value) {
        this->Item[this->tableinfo->sourceColumn] = value;
    }
    
    inline System::String *  NewDataSet::infoRow::get_check() {
        return (__try_cast<System::String *  >(this->Item[this->tableinfo->checkColumn]));
    }
    inline void NewDataSet::infoRow::set_check(System::String *  value) {
        this->Item[this->tableinfo->checkColumn] = value;
    }
    
    inline dias-devel::NewDataSet::cmdRow *  NewDataSet::infoRow::get_cmdRow() {
        return (__try_cast<dias-devel::NewDataSet::cmdRow *  >(this->GetParentRow(this->Table->ParentRelations->Item[S"cmd_info"])));
    }
    inline void NewDataSet::infoRow::set_cmdRow(dias-devel::NewDataSet::cmdRow *  value) {
        this->SetParentRow(value, this->Table->ParentRelations->Item[S"cmd_info"]);
    }
    
    
    
    
    inline NewDataSet::infoRowChangeEvent::infoRowChangeEvent(dias-devel::NewDataSet::infoRow *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dias-devel::NewDataSet::infoRow *  NewDataSet::infoRowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction NewDataSet::infoRowChangeEvent::get_Action() {
        return this->eventAction;
    }
    
    
    
    
    
    
    
    
    
    
    
    inline NewDataSet::argDataTable::argDataTable() : 
            DataTable(S"arg") {
        this->InitClass();
    }
    
    inline NewDataSet::argDataTable::argDataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 NewDataSet::argDataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  NewDataSet::argDataTable::get_titleColumn() {
        return this->columntitle;
    }
    
    inline System::Data::DataColumn *  NewDataSet::argDataTable::get_nameColumn() {
        return this->columnname;
    }
    
    inline System::Data::DataColumn *  NewDataSet::argDataTable::get_gentypeColumn() {
        return this->columngentype;
    }
    
    inline System::Data::DataColumn *  NewDataSet::argDataTable::get_subtypeColumn() {
        return this->columnsubtype;
    }
    
    inline System::Data::DataColumn *  NewDataSet::argDataTable::get_minColumn() {
        return this->columnmin;
    }
    
    inline System::Data::DataColumn *  NewDataSet::argDataTable::get_maxColumn() {
        return this->columnmax;
    }
    
    inline System::Data::DataColumn *  NewDataSet::argDataTable::get__defaultColumn() {
        return this->column_default;
    }
    
    inline System::Data::DataColumn *  NewDataSet::argDataTable::get_arg_IdColumn() {
        return this->columnarg_Id;
    }
    
    inline System::Data::DataColumn *  NewDataSet::argDataTable::get_cmd_IdColumn() {
        return this->columncmd_Id;
    }
    
    inline dias-devel::NewDataSet::argRow *  NewDataSet::argDataTable::get_Item(System::Int32 index) {
        return (__try_cast<dias-devel::NewDataSet::argRow *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void NewDataSet::argDataTable::AddargRow(dias-devel::NewDataSet::argRow *  row) {
        this->Rows->Add(row);
    };
    
    inline dias-devel::NewDataSet::argRow *  NewDataSet::argDataTable::AddargRow(System::String *  title, System::String *  name, System::String *  gentype, System::String *  subtype, System::Int32 min, System::Int32 max, System::String *  _default, dias-devel::NewDataSet::cmdRow *  parentcmdRowBycmd_arg) {
        dias-devel::NewDataSet::argRow *  rowargRow = (__try_cast<dias-devel::NewDataSet::argRow *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[9];
                __mcTemp__1[0] = title;
                __mcTemp__1[1] = name;
                __mcTemp__1[2] = gentype;
                __mcTemp__1[3] = subtype;
                __mcTemp__1[4] = __box(min);
                __mcTemp__1[5] = __box(max);
                __mcTemp__1[6] = _default;
                __mcTemp__1[7] = 0;
                __mcTemp__1[8] = parentcmdRowBycmd_arg->Item[2];
        rowargRow->ItemArray = __mcTemp__1;
        this->Rows->Add(rowargRow);
        return rowargRow;
    };
    
    inline System::Collections::IEnumerator *  NewDataSet::argDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  NewDataSet::argDataTable::Clone() {
        dias-devel::NewDataSet::argDataTable *  cln = (__try_cast<dias-devel::NewDataSet::argDataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  NewDataSet::argDataTable::CreateInstance() {
        return new dias-devel::NewDataSet::argDataTable();
    };
    
    inline System::Void NewDataSet::argDataTable::InitVars() {
        this->columntitle = this->Columns->Item[S"title"];
        this->columnname = this->Columns->Item[S"name"];
        this->columngentype = this->Columns->Item[S"gentype"];
        this->columnsubtype = this->Columns->Item[S"subtype"];
        this->columnmin = this->Columns->Item[S"min"];
        this->columnmax = this->Columns->Item[S"max"];
        this->column_default = this->Columns->Item[S"default"];
        this->columnarg_Id = this->Columns->Item[S"arg_Id"];
        this->columncmd_Id = this->Columns->Item[S"cmd_Id"];
    };
    
    inline System::Void NewDataSet::argDataTable::InitClass() {
        this->columntitle = new System::Data::DataColumn(S"title", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columntitle);
        this->columnname = new System::Data::DataColumn(S"name", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columnname);
        this->columngentype = new System::Data::DataColumn(S"gentype", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columngentype);
        this->columnsubtype = new System::Data::DataColumn(S"subtype", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columnsubtype);
        this->columnmin = new System::Data::DataColumn(S"min", __typeof(System::Int32), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columnmin);
        this->columnmax = new System::Data::DataColumn(S"max", __typeof(System::Int32), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columnmax);
        this->column_default = new System::Data::DataColumn(S"default", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->column_default);
        this->columnarg_Id = new System::Data::DataColumn(S"arg_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columnarg_Id);
        this->columncmd_Id = new System::Data::DataColumn(S"cmd_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columncmd_Id);
        System::Data::DataColumn* __mcTemp__1[] = new System::Data::DataColumn*[1];
                        __mcTemp__1[0] = this->columnarg_Id;
        this->Constraints->Add(new System::Data::UniqueConstraint(S"Constraint1", __mcTemp__1, true));
        this->columntitle->Namespace = S"";
        this->columnname->Namespace = S"";
        this->columngentype->Namespace = S"";
        this->columnsubtype->Namespace = S"";
        this->columnmin->Namespace = S"";
        this->columnmax->Namespace = S"";
        this->column_default->Namespace = S"";
        this->columnarg_Id->AutoIncrement = true;
        this->columnarg_Id->AllowDBNull = false;
        this->columnarg_Id->Unique = true;
    };
    
    inline dias-devel::NewDataSet::argRow *  NewDataSet::argDataTable::NewargRow() {
        return (__try_cast<dias-devel::NewDataSet::argRow *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  NewDataSet::argDataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new dias-devel::NewDataSet::argRow(builder);
    };
    
    inline System::Type *  NewDataSet::argDataTable::GetRowType() {
        return __typeof(dias-devel::NewDataSet::argRow);
    };
    
    inline System::Void NewDataSet::argDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->argRowChanged != 0)) {
            this->argRowChanged(this, new dias-devel::NewDataSet::argRowChangeEvent((__try_cast<dias-devel::NewDataSet::argRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::argDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->argRowChanging != 0)) {
            this->argRowChanging(this, new dias-devel::NewDataSet::argRowChangeEvent((__try_cast<dias-devel::NewDataSet::argRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::argDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->argRowDeleted != 0)) {
            this->argRowDeleted(this, new dias-devel::NewDataSet::argRowChangeEvent((__try_cast<dias-devel::NewDataSet::argRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::argDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->argRowDeleting != 0)) {
            this->argRowDeleting(this, new dias-devel::NewDataSet::argRowChangeEvent((__try_cast<dias-devel::NewDataSet::argRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::argDataTable::RemoveargRow(dias-devel::NewDataSet::argRow *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline NewDataSet::argRow::argRow(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->tablearg = (__try_cast<dias-devel::NewDataSet::argDataTable *  >(this->Table));
    }
    
    inline System::String *  NewDataSet::argRow::get_title() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tablearg->titleColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::argRow::set_title(System::String *  value) {
        this->Item[this->tablearg->titleColumn] = value;
    }
    
    inline System::String *  NewDataSet::argRow::get_name() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tablearg->nameColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::argRow::set_name(System::String *  value) {
        this->Item[this->tablearg->nameColumn] = value;
    }
    
    inline System::String *  NewDataSet::argRow::get_gentype() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tablearg->gentypeColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::argRow::set_gentype(System::String *  value) {
        this->Item[this->tablearg->gentypeColumn] = value;
    }
    
    inline System::String *  NewDataSet::argRow::get_subtype() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tablearg->subtypeColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::argRow::set_subtype(System::String *  value) {
        this->Item[this->tablearg->subtypeColumn] = value;
    }
    
    inline System::Int32 NewDataSet::argRow::get_min() {
        try {
            return (*__try_cast<__box System::Int32 *  >(this->Item[this->tablearg->minColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::argRow::set_min(System::Int32 value) {
        this->Item[this->tablearg->minColumn] = __box(value);
    }
    
    inline System::Int32 NewDataSet::argRow::get_max() {
        try {
            return (*__try_cast<__box System::Int32 *  >(this->Item[this->tablearg->maxColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::argRow::set_max(System::Int32 value) {
        this->Item[this->tablearg->maxColumn] = __box(value);
    }
    
    inline System::String *  NewDataSet::argRow::get__default() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tablearg->_defaultColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::argRow::set__default(System::String *  value) {
        this->Item[this->tablearg->_defaultColumn] = value;
    }
    
    inline dias-devel::NewDataSet::cmdRow *  NewDataSet::argRow::get_cmdRow() {
        return (__try_cast<dias-devel::NewDataSet::cmdRow *  >(this->GetParentRow(this->Table->ParentRelations->Item[S"cmd_arg"])));
    }
    inline void NewDataSet::argRow::set_cmdRow(dias-devel::NewDataSet::cmdRow *  value) {
        this->SetParentRow(value, this->Table->ParentRelations->Item[S"cmd_arg"]);
    }
    
    inline System::Boolean NewDataSet::argRow::IstitleNull() {
        return this->IsNull(this->tablearg->titleColumn);
    };
    
    inline System::Void NewDataSet::argRow::SettitleNull() {
        this->Item[this->tablearg->titleColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean NewDataSet::argRow::IsnameNull() {
        return this->IsNull(this->tablearg->nameColumn);
    };
    
    inline System::Void NewDataSet::argRow::SetnameNull() {
        this->Item[this->tablearg->nameColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean NewDataSet::argRow::IsgentypeNull() {
        return this->IsNull(this->tablearg->gentypeColumn);
    };
    
    inline System::Void NewDataSet::argRow::SetgentypeNull() {
        this->Item[this->tablearg->gentypeColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean NewDataSet::argRow::IssubtypeNull() {
        return this->IsNull(this->tablearg->subtypeColumn);
    };
    
    inline System::Void NewDataSet::argRow::SetsubtypeNull() {
        this->Item[this->tablearg->subtypeColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean NewDataSet::argRow::IsminNull() {
        return this->IsNull(this->tablearg->minColumn);
    };
    
    inline System::Void NewDataSet::argRow::SetminNull() {
        this->Item[this->tablearg->minColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean NewDataSet::argRow::IsmaxNull() {
        return this->IsNull(this->tablearg->maxColumn);
    };
    
    inline System::Void NewDataSet::argRow::SetmaxNull() {
        this->Item[this->tablearg->maxColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean NewDataSet::argRow::Is_defaultNull() {
        return this->IsNull(this->tablearg->_defaultColumn);
    };
    
    inline System::Void NewDataSet::argRow::Set_defaultNull() {
        this->Item[this->tablearg->_defaultColumn] = System::Convert::DBNull;
    };
    
    inline dias-devel::NewDataSet::_enumRow *  NewDataSet::argRow::GetenumRows()[] {
        return (__try_cast<dias-devel::NewDataSet::_enumRow * [] >(this->GetChildRows(this->Table->ChildRelations->Item[S"arg_enum"])));
    };
    
    
    
    
    inline NewDataSet::argRowChangeEvent::argRowChangeEvent(dias-devel::NewDataSet::argRow *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dias-devel::NewDataSet::argRow *  NewDataSet::argRowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction NewDataSet::argRowChangeEvent::get_Action() {
        return this->eventAction;
    }
    
    
    
    
    inline NewDataSet::_enumDataTable::_enumDataTable() : 
            DataTable(S"enum") {
        this->InitClass();
    }
    
    inline NewDataSet::_enumDataTable::_enumDataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 NewDataSet::_enumDataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  NewDataSet::_enumDataTable::get_enum_IdColumn() {
        return this->columnenum_Id;
    }
    
    inline System::Data::DataColumn *  NewDataSet::_enumDataTable::get_arg_IdColumn() {
        return this->columnarg_Id;
    }
    
    inline dias-devel::NewDataSet::_enumRow *  NewDataSet::_enumDataTable::get_Item(System::Int32 index) {
        return (__try_cast<dias-devel::NewDataSet::_enumRow *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void NewDataSet::_enumDataTable::Add_enumRow(dias-devel::NewDataSet::_enumRow *  row) {
        this->Rows->Add(row);
    };
    
    inline dias-devel::NewDataSet::_enumRow *  NewDataSet::_enumDataTable::Add_enumRow(dias-devel::NewDataSet::argRow *  parentargRowByarg_enum) {
        dias-devel::NewDataSet::_enumRow *  row_enumRow = (__try_cast<dias-devel::NewDataSet::_enumRow *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[2];
                __mcTemp__1[0] = 0;
                __mcTemp__1[1] = parentargRowByarg_enum->Item[7];
        row_enumRow->ItemArray = __mcTemp__1;
        this->Rows->Add(row_enumRow);
        return row_enumRow;
    };
    
    inline System::Collections::IEnumerator *  NewDataSet::_enumDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  NewDataSet::_enumDataTable::Clone() {
        dias-devel::NewDataSet::_enumDataTable *  cln = (__try_cast<dias-devel::NewDataSet::_enumDataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  NewDataSet::_enumDataTable::CreateInstance() {
        return new dias-devel::NewDataSet::_enumDataTable();
    };
    
    inline System::Void NewDataSet::_enumDataTable::InitVars() {
        this->columnenum_Id = this->Columns->Item[S"enum_Id"];
        this->columnarg_Id = this->Columns->Item[S"arg_Id"];
    };
    
    inline System::Void NewDataSet::_enumDataTable::InitClass() {
        this->columnenum_Id = new System::Data::DataColumn(S"enum_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columnenum_Id);
        this->columnarg_Id = new System::Data::DataColumn(S"arg_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columnarg_Id);
        System::Data::DataColumn* __mcTemp__1[] = new System::Data::DataColumn*[1];
                        __mcTemp__1[0] = this->columnenum_Id;
        this->Constraints->Add(new System::Data::UniqueConstraint(S"Constraint1", __mcTemp__1, true));
        this->columnenum_Id->AutoIncrement = true;
        this->columnenum_Id->AllowDBNull = false;
        this->columnenum_Id->Unique = true;
    };
    
    inline dias-devel::NewDataSet::_enumRow *  NewDataSet::_enumDataTable::New_enumRow() {
        return (__try_cast<dias-devel::NewDataSet::_enumRow *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  NewDataSet::_enumDataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new dias-devel::NewDataSet::_enumRow(builder);
    };
    
    inline System::Type *  NewDataSet::_enumDataTable::GetRowType() {
        return __typeof(dias-devel::NewDataSet::_enumRow);
    };
    
    inline System::Void NewDataSet::_enumDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->_enumRowChanged != 0)) {
            this->_enumRowChanged(this, new dias-devel::NewDataSet::_enumRowChangeEvent((__try_cast<dias-devel::NewDataSet::_enumRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::_enumDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->_enumRowChanging != 0)) {
            this->_enumRowChanging(this, new dias-devel::NewDataSet::_enumRowChangeEvent((__try_cast<dias-devel::NewDataSet::_enumRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::_enumDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->_enumRowDeleted != 0)) {
            this->_enumRowDeleted(this, new dias-devel::NewDataSet::_enumRowChangeEvent((__try_cast<dias-devel::NewDataSet::_enumRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::_enumDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->_enumRowDeleting != 0)) {
            this->_enumRowDeleting(this, new dias-devel::NewDataSet::_enumRowChangeEvent((__try_cast<dias-devel::NewDataSet::_enumRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::_enumDataTable::Remove_enumRow(dias-devel::NewDataSet::_enumRow *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline NewDataSet::_enumRow::_enumRow(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->table_enum = (__try_cast<dias-devel::NewDataSet::_enumDataTable *  >(this->Table));
    }
    
    inline dias-devel::NewDataSet::argRow *  NewDataSet::_enumRow::get_argRow() {
        return (__try_cast<dias-devel::NewDataSet::argRow *  >(this->GetParentRow(this->Table->ParentRelations->Item[S"arg_enum"])));
    }
    inline void NewDataSet::_enumRow::set_argRow(dias-devel::NewDataSet::argRow *  value) {
        this->SetParentRow(value, this->Table->ParentRelations->Item[S"arg_enum"]);
    }
    
    inline dias-devel::NewDataSet::entryRow *  NewDataSet::_enumRow::GetentryRows()[] {
        return (__try_cast<dias-devel::NewDataSet::entryRow * [] >(this->GetChildRows(this->Table->ChildRelations->Item[S"enum_entry"])));
    };
    
    
    
    
    inline NewDataSet::_enumRowChangeEvent::_enumRowChangeEvent(dias-devel::NewDataSet::_enumRow *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dias-devel::NewDataSet::_enumRow *  NewDataSet::_enumRowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction NewDataSet::_enumRowChangeEvent::get_Action() {
        return this->eventAction;
    }
    
    
    
    
    
    
    inline NewDataSet::entryDataTable::entryDataTable() : 
            DataTable(S"entry") {
        this->InitClass();
    }
    
    inline NewDataSet::entryDataTable::entryDataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 NewDataSet::entryDataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  NewDataSet::entryDataTable::get_titleColumn() {
        return this->columntitle;
    }
    
    inline System::Data::DataColumn *  NewDataSet::entryDataTable::get_nameColumn() {
        return this->columnname;
    }
    
    inline System::Data::DataColumn *  NewDataSet::entryDataTable::get_valColumn() {
        return this->columnval;
    }
    
    inline System::Data::DataColumn *  NewDataSet::entryDataTable::get_enum_IdColumn() {
        return this->columnenum_Id;
    }
    
    inline dias-devel::NewDataSet::entryRow *  NewDataSet::entryDataTable::get_Item(System::Int32 index) {
        return (__try_cast<dias-devel::NewDataSet::entryRow *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void NewDataSet::entryDataTable::AddentryRow(dias-devel::NewDataSet::entryRow *  row) {
        this->Rows->Add(row);
    };
    
    inline dias-devel::NewDataSet::entryRow *  NewDataSet::entryDataTable::AddentryRow(System::String *  title, System::String *  name, System::Int16 val, dias-devel::NewDataSet::_enumRow *  parent_enumRowByenum_entry) {
        dias-devel::NewDataSet::entryRow *  rowentryRow = (__try_cast<dias-devel::NewDataSet::entryRow *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[4];
                __mcTemp__1[0] = title;
                __mcTemp__1[1] = name;
                __mcTemp__1[2] = __box(val);
                __mcTemp__1[3] = parent_enumRowByenum_entry->Item[0];
        rowentryRow->ItemArray = __mcTemp__1;
        this->Rows->Add(rowentryRow);
        return rowentryRow;
    };
    
    inline System::Collections::IEnumerator *  NewDataSet::entryDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  NewDataSet::entryDataTable::Clone() {
        dias-devel::NewDataSet::entryDataTable *  cln = (__try_cast<dias-devel::NewDataSet::entryDataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  NewDataSet::entryDataTable::CreateInstance() {
        return new dias-devel::NewDataSet::entryDataTable();
    };
    
    inline System::Void NewDataSet::entryDataTable::InitVars() {
        this->columntitle = this->Columns->Item[S"title"];
        this->columnname = this->Columns->Item[S"name"];
        this->columnval = this->Columns->Item[S"val"];
        this->columnenum_Id = this->Columns->Item[S"enum_Id"];
    };
    
    inline System::Void NewDataSet::entryDataTable::InitClass() {
        this->columntitle = new System::Data::DataColumn(S"title", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columntitle);
        this->columnname = new System::Data::DataColumn(S"name", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columnname);
        this->columnval = new System::Data::DataColumn(S"val", __typeof(System::Int16), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columnval);
        this->columnenum_Id = new System::Data::DataColumn(S"enum_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columnenum_Id);
        this->columntitle->Namespace = S"";
        this->columnname->Namespace = S"";
        this->columnval->Namespace = S"";
    };
    
    inline dias-devel::NewDataSet::entryRow *  NewDataSet::entryDataTable::NewentryRow() {
        return (__try_cast<dias-devel::NewDataSet::entryRow *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  NewDataSet::entryDataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new dias-devel::NewDataSet::entryRow(builder);
    };
    
    inline System::Type *  NewDataSet::entryDataTable::GetRowType() {
        return __typeof(dias-devel::NewDataSet::entryRow);
    };
    
    inline System::Void NewDataSet::entryDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->entryRowChanged != 0)) {
            this->entryRowChanged(this, new dias-devel::NewDataSet::entryRowChangeEvent((__try_cast<dias-devel::NewDataSet::entryRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::entryDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->entryRowChanging != 0)) {
            this->entryRowChanging(this, new dias-devel::NewDataSet::entryRowChangeEvent((__try_cast<dias-devel::NewDataSet::entryRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::entryDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->entryRowDeleted != 0)) {
            this->entryRowDeleted(this, new dias-devel::NewDataSet::entryRowChangeEvent((__try_cast<dias-devel::NewDataSet::entryRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::entryDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->entryRowDeleting != 0)) {
            this->entryRowDeleting(this, new dias-devel::NewDataSet::entryRowChangeEvent((__try_cast<dias-devel::NewDataSet::entryRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::entryDataTable::RemoveentryRow(dias-devel::NewDataSet::entryRow *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline NewDataSet::entryRow::entryRow(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->tableentry = (__try_cast<dias-devel::NewDataSet::entryDataTable *  >(this->Table));
    }
    
    inline System::String *  NewDataSet::entryRow::get_title() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tableentry->titleColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::entryRow::set_title(System::String *  value) {
        this->Item[this->tableentry->titleColumn] = value;
    }
    
    inline System::String *  NewDataSet::entryRow::get_name() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tableentry->nameColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::entryRow::set_name(System::String *  value) {
        this->Item[this->tableentry->nameColumn] = value;
    }
    
    inline System::Int16 NewDataSet::entryRow::get_val() {
        try {
            return (*__try_cast<__box System::Int16 *  >(this->Item[this->tableentry->valColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::entryRow::set_val(System::Int16 value) {
        this->Item[this->tableentry->valColumn] = __box(value);
    }
    
    inline dias-devel::NewDataSet::_enumRow *  NewDataSet::entryRow::get__enumRow() {
        return (__try_cast<dias-devel::NewDataSet::_enumRow *  >(this->GetParentRow(this->Table->ParentRelations->Item[S"enum_entry"])));
    }
    inline void NewDataSet::entryRow::set__enumRow(dias-devel::NewDataSet::_enumRow *  value) {
        this->SetParentRow(value, this->Table->ParentRelations->Item[S"enum_entry"]);
    }
    
    inline System::Boolean NewDataSet::entryRow::IstitleNull() {
        return this->IsNull(this->tableentry->titleColumn);
    };
    
    inline System::Void NewDataSet::entryRow::SettitleNull() {
        this->Item[this->tableentry->titleColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean NewDataSet::entryRow::IsnameNull() {
        return this->IsNull(this->tableentry->nameColumn);
    };
    
    inline System::Void NewDataSet::entryRow::SetnameNull() {
        this->Item[this->tableentry->nameColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean NewDataSet::entryRow::IsvalNull() {
        return this->IsNull(this->tableentry->valColumn);
    };
    
    inline System::Void NewDataSet::entryRow::SetvalNull() {
        this->Item[this->tableentry->valColumn] = System::Convert::DBNull;
    };
    
    
    
    
    inline NewDataSet::entryRowChangeEvent::entryRowChangeEvent(dias-devel::NewDataSet::entryRow *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dias-devel::NewDataSet::entryRow *  NewDataSet::entryRowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction NewDataSet::entryRowChangeEvent::get_Action() {
        return this->eventAction;
    }
    
    
    
    
    
    
    inline NewDataSet::cmdDataTable::cmdDataTable() : 
            DataTable(S"cmd") {
        this->InitClass();
    }
    
    inline NewDataSet::cmdDataTable::cmdDataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 NewDataSet::cmdDataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  NewDataSet::cmdDataTable::get_titleColumn() {
        return this->columntitle;
    }
    
    inline System::Data::DataColumn *  NewDataSet::cmdDataTable::get_nameColumn() {
        return this->columnname;
    }
    
    inline System::Data::DataColumn *  NewDataSet::cmdDataTable::get_cmd_IdColumn() {
        return this->columncmd_Id;
    }
    
    inline System::Data::DataColumn *  NewDataSet::cmdDataTable::get_class2_IdColumn() {
        return this->columnclass2_Id;
    }
    
    inline dias-devel::NewDataSet::cmdRow *  NewDataSet::cmdDataTable::get_Item(System::Int32 index) {
        return (__try_cast<dias-devel::NewDataSet::cmdRow *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void NewDataSet::cmdDataTable::AddcmdRow(dias-devel::NewDataSet::cmdRow *  row) {
        this->Rows->Add(row);
    };
    
    inline dias-devel::NewDataSet::cmdRow *  NewDataSet::cmdDataTable::AddcmdRow(System::String *  title, System::String *  name, dias-devel::NewDataSet::class2Row *  parentclass2RowByclass2_cmd) {
        dias-devel::NewDataSet::cmdRow *  rowcmdRow = (__try_cast<dias-devel::NewDataSet::cmdRow *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[4];
                __mcTemp__1[0] = title;
                __mcTemp__1[1] = name;
                __mcTemp__1[2] = 0;
                __mcTemp__1[3] = parentclass2RowByclass2_cmd->Item[2];
        rowcmdRow->ItemArray = __mcTemp__1;
        this->Rows->Add(rowcmdRow);
        return rowcmdRow;
    };
    
    inline System::Collections::IEnumerator *  NewDataSet::cmdDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  NewDataSet::cmdDataTable::Clone() {
        dias-devel::NewDataSet::cmdDataTable *  cln = (__try_cast<dias-devel::NewDataSet::cmdDataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  NewDataSet::cmdDataTable::CreateInstance() {
        return new dias-devel::NewDataSet::cmdDataTable();
    };
    
    inline System::Void NewDataSet::cmdDataTable::InitVars() {
        this->columntitle = this->Columns->Item[S"title"];
        this->columnname = this->Columns->Item[S"name"];
        this->columncmd_Id = this->Columns->Item[S"cmd_Id"];
        this->columnclass2_Id = this->Columns->Item[S"class2_Id"];
    };
    
    inline System::Void NewDataSet::cmdDataTable::InitClass() {
        this->columntitle = new System::Data::DataColumn(S"title", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columntitle);
        this->columnname = new System::Data::DataColumn(S"name", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columnname);
        this->columncmd_Id = new System::Data::DataColumn(S"cmd_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columncmd_Id);
        this->columnclass2_Id = new System::Data::DataColumn(S"class2_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columnclass2_Id);
        System::Data::DataColumn* __mcTemp__1[] = new System::Data::DataColumn*[1];
                        __mcTemp__1[0] = this->columncmd_Id;
        this->Constraints->Add(new System::Data::UniqueConstraint(S"Constraint1", __mcTemp__1, true));
        this->columntitle->Namespace = S"";
        this->columnname->Namespace = S"";
        this->columncmd_Id->AutoIncrement = true;
        this->columncmd_Id->AllowDBNull = false;
        this->columncmd_Id->Unique = true;
    };
    
    inline dias-devel::NewDataSet::cmdRow *  NewDataSet::cmdDataTable::NewcmdRow() {
        return (__try_cast<dias-devel::NewDataSet::cmdRow *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  NewDataSet::cmdDataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new dias-devel::NewDataSet::cmdRow(builder);
    };
    
    inline System::Type *  NewDataSet::cmdDataTable::GetRowType() {
        return __typeof(dias-devel::NewDataSet::cmdRow);
    };
    
    inline System::Void NewDataSet::cmdDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->cmdRowChanged != 0)) {
            this->cmdRowChanged(this, new dias-devel::NewDataSet::cmdRowChangeEvent((__try_cast<dias-devel::NewDataSet::cmdRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::cmdDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->cmdRowChanging != 0)) {
            this->cmdRowChanging(this, new dias-devel::NewDataSet::cmdRowChangeEvent((__try_cast<dias-devel::NewDataSet::cmdRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::cmdDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->cmdRowDeleted != 0)) {
            this->cmdRowDeleted(this, new dias-devel::NewDataSet::cmdRowChangeEvent((__try_cast<dias-devel::NewDataSet::cmdRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::cmdDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->cmdRowDeleting != 0)) {
            this->cmdRowDeleting(this, new dias-devel::NewDataSet::cmdRowChangeEvent((__try_cast<dias-devel::NewDataSet::cmdRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::cmdDataTable::RemovecmdRow(dias-devel::NewDataSet::cmdRow *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline NewDataSet::cmdRow::cmdRow(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->tablecmd = (__try_cast<dias-devel::NewDataSet::cmdDataTable *  >(this->Table));
    }
    
    inline System::String *  NewDataSet::cmdRow::get_title() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tablecmd->titleColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::cmdRow::set_title(System::String *  value) {
        this->Item[this->tablecmd->titleColumn] = value;
    }
    
    inline System::String *  NewDataSet::cmdRow::get_name() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tablecmd->nameColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::cmdRow::set_name(System::String *  value) {
        this->Item[this->tablecmd->nameColumn] = value;
    }
    
    inline dias-devel::NewDataSet::class2Row *  NewDataSet::cmdRow::get_class2Row() {
        return (__try_cast<dias-devel::NewDataSet::class2Row *  >(this->GetParentRow(this->Table->ParentRelations->Item[S"class2_cmd"])));
    }
    inline void NewDataSet::cmdRow::set_class2Row(dias-devel::NewDataSet::class2Row *  value) {
        this->SetParentRow(value, this->Table->ParentRelations->Item[S"class2_cmd"]);
    }
    
    inline System::Boolean NewDataSet::cmdRow::IstitleNull() {
        return this->IsNull(this->tablecmd->titleColumn);
    };
    
    inline System::Void NewDataSet::cmdRow::SettitleNull() {
        this->Item[this->tablecmd->titleColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean NewDataSet::cmdRow::IsnameNull() {
        return this->IsNull(this->tablecmd->nameColumn);
    };
    
    inline System::Void NewDataSet::cmdRow::SetnameNull() {
        this->Item[this->tablecmd->nameColumn] = System::Convert::DBNull;
    };
    
    inline dias-devel::NewDataSet::infoRow *  NewDataSet::cmdRow::GetinfoRows()[] {
        return (__try_cast<dias-devel::NewDataSet::infoRow * [] >(this->GetChildRows(this->Table->ChildRelations->Item[S"cmd_info"])));
    };
    
    inline dias-devel::NewDataSet::argRow *  NewDataSet::cmdRow::GetargRows()[] {
        return (__try_cast<dias-devel::NewDataSet::argRow * [] >(this->GetChildRows(this->Table->ChildRelations->Item[S"cmd_arg"])));
    };
    
    
    
    
    inline NewDataSet::cmdRowChangeEvent::cmdRowChangeEvent(dias-devel::NewDataSet::cmdRow *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dias-devel::NewDataSet::cmdRow *  NewDataSet::cmdRowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction NewDataSet::cmdRowChangeEvent::get_Action() {
        return this->eventAction;
    }
    
    
    
    
    
    
    inline NewDataSet::class2DataTable::class2DataTable() : 
            DataTable(S"class2") {
        this->InitClass();
    }
    
    inline NewDataSet::class2DataTable::class2DataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 NewDataSet::class2DataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  NewDataSet::class2DataTable::get_titleColumn() {
        return this->columntitle;
    }
    
    inline System::Data::DataColumn *  NewDataSet::class2DataTable::get_nameColumn() {
        return this->columnname;
    }
    
    inline System::Data::DataColumn *  NewDataSet::class2DataTable::get_class2_IdColumn() {
        return this->columnclass2_Id;
    }
    
    inline System::Data::DataColumn *  NewDataSet::class2DataTable::get_class_IdColumn() {
        return this->columnclass_Id;
    }
    
    inline dias-devel::NewDataSet::class2Row *  NewDataSet::class2DataTable::get_Item(System::Int32 index) {
        return (__try_cast<dias-devel::NewDataSet::class2Row *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void NewDataSet::class2DataTable::Addclass2Row(dias-devel::NewDataSet::class2Row *  row) {
        this->Rows->Add(row);
    };
    
    inline dias-devel::NewDataSet::class2Row *  NewDataSet::class2DataTable::Addclass2Row(System::String *  title, System::String *  name, dias-devel::NewDataSet::_classRow *  parent_classRowByclass_class2) {
        dias-devel::NewDataSet::class2Row *  rowclass2Row = (__try_cast<dias-devel::NewDataSet::class2Row *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[4];
                __mcTemp__1[0] = title;
                __mcTemp__1[1] = name;
                __mcTemp__1[2] = 0;
                __mcTemp__1[3] = parent_classRowByclass_class2->Item[2];
        rowclass2Row->ItemArray = __mcTemp__1;
        this->Rows->Add(rowclass2Row);
        return rowclass2Row;
    };
    
    inline System::Collections::IEnumerator *  NewDataSet::class2DataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  NewDataSet::class2DataTable::Clone() {
        dias-devel::NewDataSet::class2DataTable *  cln = (__try_cast<dias-devel::NewDataSet::class2DataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  NewDataSet::class2DataTable::CreateInstance() {
        return new dias-devel::NewDataSet::class2DataTable();
    };
    
    inline System::Void NewDataSet::class2DataTable::InitVars() {
        this->columntitle = this->Columns->Item[S"title"];
        this->columnname = this->Columns->Item[S"name"];
        this->columnclass2_Id = this->Columns->Item[S"class2_Id"];
        this->columnclass_Id = this->Columns->Item[S"class_Id"];
    };
    
    inline System::Void NewDataSet::class2DataTable::InitClass() {
        this->columntitle = new System::Data::DataColumn(S"title", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columntitle);
        this->columnname = new System::Data::DataColumn(S"name", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columnname);
        this->columnclass2_Id = new System::Data::DataColumn(S"class2_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columnclass2_Id);
        this->columnclass_Id = new System::Data::DataColumn(S"class_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columnclass_Id);
        System::Data::DataColumn* __mcTemp__1[] = new System::Data::DataColumn*[1];
                        __mcTemp__1[0] = this->columnclass2_Id;
        this->Constraints->Add(new System::Data::UniqueConstraint(S"Constraint1", __mcTemp__1, true));
        this->columntitle->Namespace = S"";
        this->columnname->Namespace = S"";
        this->columnclass2_Id->AutoIncrement = true;
        this->columnclass2_Id->AllowDBNull = false;
        this->columnclass2_Id->Unique = true;
    };
    
    inline dias-devel::NewDataSet::class2Row *  NewDataSet::class2DataTable::Newclass2Row() {
        return (__try_cast<dias-devel::NewDataSet::class2Row *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  NewDataSet::class2DataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new dias-devel::NewDataSet::class2Row(builder);
    };
    
    inline System::Type *  NewDataSet::class2DataTable::GetRowType() {
        return __typeof(dias-devel::NewDataSet::class2Row);
    };
    
    inline System::Void NewDataSet::class2DataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->class2RowChanged != 0)) {
            this->class2RowChanged(this, new dias-devel::NewDataSet::class2RowChangeEvent((__try_cast<dias-devel::NewDataSet::class2Row *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::class2DataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->class2RowChanging != 0)) {
            this->class2RowChanging(this, new dias-devel::NewDataSet::class2RowChangeEvent((__try_cast<dias-devel::NewDataSet::class2Row *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::class2DataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->class2RowDeleted != 0)) {
            this->class2RowDeleted(this, new dias-devel::NewDataSet::class2RowChangeEvent((__try_cast<dias-devel::NewDataSet::class2Row *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::class2DataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->class2RowDeleting != 0)) {
            this->class2RowDeleting(this, new dias-devel::NewDataSet::class2RowChangeEvent((__try_cast<dias-devel::NewDataSet::class2Row *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::class2DataTable::Removeclass2Row(dias-devel::NewDataSet::class2Row *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline NewDataSet::class2Row::class2Row(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->tableclass2 = (__try_cast<dias-devel::NewDataSet::class2DataTable *  >(this->Table));
    }
    
    inline System::String *  NewDataSet::class2Row::get_title() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tableclass2->titleColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::class2Row::set_title(System::String *  value) {
        this->Item[this->tableclass2->titleColumn] = value;
    }
    
    inline System::String *  NewDataSet::class2Row::get_name() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tableclass2->nameColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::class2Row::set_name(System::String *  value) {
        this->Item[this->tableclass2->nameColumn] = value;
    }
    
    inline dias-devel::NewDataSet::_classRow *  NewDataSet::class2Row::get__classRow() {
        return (__try_cast<dias-devel::NewDataSet::_classRow *  >(this->GetParentRow(this->Table->ParentRelations->Item[S"class_class2"])));
    }
    inline void NewDataSet::class2Row::set__classRow(dias-devel::NewDataSet::_classRow *  value) {
        this->SetParentRow(value, this->Table->ParentRelations->Item[S"class_class2"]);
    }
    
    inline System::Boolean NewDataSet::class2Row::IstitleNull() {
        return this->IsNull(this->tableclass2->titleColumn);
    };
    
    inline System::Void NewDataSet::class2Row::SettitleNull() {
        this->Item[this->tableclass2->titleColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean NewDataSet::class2Row::IsnameNull() {
        return this->IsNull(this->tableclass2->nameColumn);
    };
    
    inline System::Void NewDataSet::class2Row::SetnameNull() {
        this->Item[this->tableclass2->nameColumn] = System::Convert::DBNull;
    };
    
    inline dias-devel::NewDataSet::cmdRow *  NewDataSet::class2Row::GetcmdRows()[] {
        return (__try_cast<dias-devel::NewDataSet::cmdRow * [] >(this->GetChildRows(this->Table->ChildRelations->Item[S"class2_cmd"])));
    };
    
    
    
    
    inline NewDataSet::class2RowChangeEvent::class2RowChangeEvent(dias-devel::NewDataSet::class2Row *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dias-devel::NewDataSet::class2Row *  NewDataSet::class2RowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction NewDataSet::class2RowChangeEvent::get_Action() {
        return this->eventAction;
    }
    
    
    
    
    
    
    inline NewDataSet::_classDataTable::_classDataTable() : 
            DataTable(S"class") {
        this->InitClass();
    }
    
    inline NewDataSet::_classDataTable::_classDataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 NewDataSet::_classDataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  NewDataSet::_classDataTable::get_titleColumn() {
        return this->columntitle;
    }
    
    inline System::Data::DataColumn *  NewDataSet::_classDataTable::get_nameColumn() {
        return this->columnname;
    }
    
    inline System::Data::DataColumn *  NewDataSet::_classDataTable::get_class_IdColumn() {
        return this->columnclass_Id;
    }
    
    inline System::Data::DataColumn *  NewDataSet::_classDataTable::get_cmdsys_IdColumn() {
        return this->columncmdsys_Id;
    }
    
    inline dias-devel::NewDataSet::_classRow *  NewDataSet::_classDataTable::get_Item(System::Int32 index) {
        return (__try_cast<dias-devel::NewDataSet::_classRow *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void NewDataSet::_classDataTable::Add_classRow(dias-devel::NewDataSet::_classRow *  row) {
        this->Rows->Add(row);
    };
    
    inline dias-devel::NewDataSet::_classRow *  NewDataSet::_classDataTable::Add_classRow(System::String *  title, System::String *  name, dias-devel::NewDataSet::cmdsysRow *  parentcmdsysRowBycmdsys_class) {
        dias-devel::NewDataSet::_classRow *  row_classRow = (__try_cast<dias-devel::NewDataSet::_classRow *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[4];
                __mcTemp__1[0] = title;
                __mcTemp__1[1] = name;
                __mcTemp__1[2] = 0;
                __mcTemp__1[3] = parentcmdsysRowBycmdsys_class->Item[2];
        row_classRow->ItemArray = __mcTemp__1;
        this->Rows->Add(row_classRow);
        return row_classRow;
    };
    
    inline System::Collections::IEnumerator *  NewDataSet::_classDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  NewDataSet::_classDataTable::Clone() {
        dias-devel::NewDataSet::_classDataTable *  cln = (__try_cast<dias-devel::NewDataSet::_classDataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  NewDataSet::_classDataTable::CreateInstance() {
        return new dias-devel::NewDataSet::_classDataTable();
    };
    
    inline System::Void NewDataSet::_classDataTable::InitVars() {
        this->columntitle = this->Columns->Item[S"title"];
        this->columnname = this->Columns->Item[S"name"];
        this->columnclass_Id = this->Columns->Item[S"class_Id"];
        this->columncmdsys_Id = this->Columns->Item[S"cmdsys_Id"];
    };
    
    inline System::Void NewDataSet::_classDataTable::InitClass() {
        this->columntitle = new System::Data::DataColumn(S"title", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columntitle);
        this->columnname = new System::Data::DataColumn(S"name", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columnname);
        this->columnclass_Id = new System::Data::DataColumn(S"class_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columnclass_Id);
        this->columncmdsys_Id = new System::Data::DataColumn(S"cmdsys_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columncmdsys_Id);
        System::Data::DataColumn* __mcTemp__1[] = new System::Data::DataColumn*[1];
                        __mcTemp__1[0] = this->columnclass_Id;
        this->Constraints->Add(new System::Data::UniqueConstraint(S"Constraint1", __mcTemp__1, true));
        this->columntitle->Namespace = S"";
        this->columnname->Namespace = S"";
        this->columnclass_Id->AutoIncrement = true;
        this->columnclass_Id->AllowDBNull = false;
        this->columnclass_Id->Unique = true;
    };
    
    inline dias-devel::NewDataSet::_classRow *  NewDataSet::_classDataTable::New_classRow() {
        return (__try_cast<dias-devel::NewDataSet::_classRow *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  NewDataSet::_classDataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new dias-devel::NewDataSet::_classRow(builder);
    };
    
    inline System::Type *  NewDataSet::_classDataTable::GetRowType() {
        return __typeof(dias-devel::NewDataSet::_classRow);
    };
    
    inline System::Void NewDataSet::_classDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->_classRowChanged != 0)) {
            this->_classRowChanged(this, new dias-devel::NewDataSet::_classRowChangeEvent((__try_cast<dias-devel::NewDataSet::_classRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::_classDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->_classRowChanging != 0)) {
            this->_classRowChanging(this, new dias-devel::NewDataSet::_classRowChangeEvent((__try_cast<dias-devel::NewDataSet::_classRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::_classDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->_classRowDeleted != 0)) {
            this->_classRowDeleted(this, new dias-devel::NewDataSet::_classRowChangeEvent((__try_cast<dias-devel::NewDataSet::_classRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::_classDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->_classRowDeleting != 0)) {
            this->_classRowDeleting(this, new dias-devel::NewDataSet::_classRowChangeEvent((__try_cast<dias-devel::NewDataSet::_classRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::_classDataTable::Remove_classRow(dias-devel::NewDataSet::_classRow *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline NewDataSet::_classRow::_classRow(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->table_class = (__try_cast<dias-devel::NewDataSet::_classDataTable *  >(this->Table));
    }
    
    inline System::String *  NewDataSet::_classRow::get_title() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->table_class->titleColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::_classRow::set_title(System::String *  value) {
        this->Item[this->table_class->titleColumn] = value;
    }
    
    inline System::String *  NewDataSet::_classRow::get_name() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->table_class->nameColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::_classRow::set_name(System::String *  value) {
        this->Item[this->table_class->nameColumn] = value;
    }
    
    inline dias-devel::NewDataSet::cmdsysRow *  NewDataSet::_classRow::get_cmdsysRow() {
        return (__try_cast<dias-devel::NewDataSet::cmdsysRow *  >(this->GetParentRow(this->Table->ParentRelations->Item[S"cmdsys_class"])));
    }
    inline void NewDataSet::_classRow::set_cmdsysRow(dias-devel::NewDataSet::cmdsysRow *  value) {
        this->SetParentRow(value, this->Table->ParentRelations->Item[S"cmdsys_class"]);
    }
    
    inline System::Boolean NewDataSet::_classRow::IstitleNull() {
        return this->IsNull(this->table_class->titleColumn);
    };
    
    inline System::Void NewDataSet::_classRow::SettitleNull() {
        this->Item[this->table_class->titleColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean NewDataSet::_classRow::IsnameNull() {
        return this->IsNull(this->table_class->nameColumn);
    };
    
    inline System::Void NewDataSet::_classRow::SetnameNull() {
        this->Item[this->table_class->nameColumn] = System::Convert::DBNull;
    };
    
    inline dias-devel::NewDataSet::class2Row *  NewDataSet::_classRow::Getclass2Rows()[] {
        return (__try_cast<dias-devel::NewDataSet::class2Row * [] >(this->GetChildRows(this->Table->ChildRelations->Item[S"class_class2"])));
    };
    
    
    
    
    inline NewDataSet::_classRowChangeEvent::_classRowChangeEvent(dias-devel::NewDataSet::_classRow *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dias-devel::NewDataSet::_classRow *  NewDataSet::_classRowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction NewDataSet::_classRowChangeEvent::get_Action() {
        return this->eventAction;
    }
    
    
    
    
    
    inline NewDataSet::cmdsysDataTable::cmdsysDataTable() : 
            DataTable(S"cmdsys") {
        this->InitClass();
    }
    
    inline NewDataSet::cmdsysDataTable::cmdsysDataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 NewDataSet::cmdsysDataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  NewDataSet::cmdsysDataTable::get_systemColumn() {
        return this->columnsystem;
    }
    
    inline System::Data::DataColumn *  NewDataSet::cmdsysDataTable::get_versionColumn() {
        return this->columnversion;
    }
    
    inline System::Data::DataColumn *  NewDataSet::cmdsysDataTable::get_cmdsys_IdColumn() {
        return this->columncmdsys_Id;
    }
    
    inline dias-devel::NewDataSet::cmdsysRow *  NewDataSet::cmdsysDataTable::get_Item(System::Int32 index) {
        return (__try_cast<dias-devel::NewDataSet::cmdsysRow *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void NewDataSet::cmdsysDataTable::AddcmdsysRow(dias-devel::NewDataSet::cmdsysRow *  row) {
        this->Rows->Add(row);
    };
    
    inline dias-devel::NewDataSet::cmdsysRow *  NewDataSet::cmdsysDataTable::AddcmdsysRow(System::String *  system, System::Int16 version) {
        dias-devel::NewDataSet::cmdsysRow *  rowcmdsysRow = (__try_cast<dias-devel::NewDataSet::cmdsysRow *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[3];
                __mcTemp__1[0] = system;
                __mcTemp__1[1] = __box(version);
                __mcTemp__1[2] = 0;
        rowcmdsysRow->ItemArray = __mcTemp__1;
        this->Rows->Add(rowcmdsysRow);
        return rowcmdsysRow;
    };
    
    inline System::Collections::IEnumerator *  NewDataSet::cmdsysDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  NewDataSet::cmdsysDataTable::Clone() {
        dias-devel::NewDataSet::cmdsysDataTable *  cln = (__try_cast<dias-devel::NewDataSet::cmdsysDataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  NewDataSet::cmdsysDataTable::CreateInstance() {
        return new dias-devel::NewDataSet::cmdsysDataTable();
    };
    
    inline System::Void NewDataSet::cmdsysDataTable::InitVars() {
        this->columnsystem = this->Columns->Item[S"system"];
        this->columnversion = this->Columns->Item[S"version"];
        this->columncmdsys_Id = this->Columns->Item[S"cmdsys_Id"];
    };
    
    inline System::Void NewDataSet::cmdsysDataTable::InitClass() {
        this->columnsystem = new System::Data::DataColumn(S"system", __typeof(System::String), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columnsystem);
        this->columnversion = new System::Data::DataColumn(S"version", __typeof(System::Int16), 0, System::Data::MappingType::Attribute);
        this->Columns->Add(this->columnversion);
        this->columncmdsys_Id = new System::Data::DataColumn(S"cmdsys_Id", __typeof(System::Int32), 0, System::Data::MappingType::Hidden);
        this->Columns->Add(this->columncmdsys_Id);
        System::Data::DataColumn* __mcTemp__1[] = new System::Data::DataColumn*[1];
                        __mcTemp__1[0] = this->columncmdsys_Id;
        this->Constraints->Add(new System::Data::UniqueConstraint(S"Constraint1", __mcTemp__1, true));
        this->columnsystem->Namespace = S"";
        this->columnversion->Namespace = S"";
        this->columncmdsys_Id->AutoIncrement = true;
        this->columncmdsys_Id->AllowDBNull = false;
        this->columncmdsys_Id->Unique = true;
    };
    
    inline dias-devel::NewDataSet::cmdsysRow *  NewDataSet::cmdsysDataTable::NewcmdsysRow() {
        return (__try_cast<dias-devel::NewDataSet::cmdsysRow *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  NewDataSet::cmdsysDataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new dias-devel::NewDataSet::cmdsysRow(builder);
    };
    
    inline System::Type *  NewDataSet::cmdsysDataTable::GetRowType() {
        return __typeof(dias-devel::NewDataSet::cmdsysRow);
    };
    
    inline System::Void NewDataSet::cmdsysDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->cmdsysRowChanged != 0)) {
            this->cmdsysRowChanged(this, new dias-devel::NewDataSet::cmdsysRowChangeEvent((__try_cast<dias-devel::NewDataSet::cmdsysRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::cmdsysDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->cmdsysRowChanging != 0)) {
            this->cmdsysRowChanging(this, new dias-devel::NewDataSet::cmdsysRowChangeEvent((__try_cast<dias-devel::NewDataSet::cmdsysRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::cmdsysDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->cmdsysRowDeleted != 0)) {
            this->cmdsysRowDeleted(this, new dias-devel::NewDataSet::cmdsysRowChangeEvent((__try_cast<dias-devel::NewDataSet::cmdsysRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::cmdsysDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->cmdsysRowDeleting != 0)) {
            this->cmdsysRowDeleting(this, new dias-devel::NewDataSet::cmdsysRowChangeEvent((__try_cast<dias-devel::NewDataSet::cmdsysRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void NewDataSet::cmdsysDataTable::RemovecmdsysRow(dias-devel::NewDataSet::cmdsysRow *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline NewDataSet::cmdsysRow::cmdsysRow(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->tablecmdsys = (__try_cast<dias-devel::NewDataSet::cmdsysDataTable *  >(this->Table));
    }
    
    inline System::String *  NewDataSet::cmdsysRow::get_system() {
        try {
            return (__try_cast<System::String *  >(this->Item[this->tablecmdsys->systemColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::cmdsysRow::set_system(System::String *  value) {
        this->Item[this->tablecmdsys->systemColumn] = value;
    }
    
    inline System::Int16 NewDataSet::cmdsysRow::get_version() {
        try {
            return (*__try_cast<__box System::Int16 *  >(this->Item[this->tablecmdsys->versionColumn]));
        }
        catch (System::InvalidCastException * e) {
            throw new System::Data::StrongTypingException(S"Cannot get value because it is DBNull.", e);
        }
    }
    inline void NewDataSet::cmdsysRow::set_version(System::Int16 value) {
        this->Item[this->tablecmdsys->versionColumn] = __box(value);
    }
    
    inline System::Boolean NewDataSet::cmdsysRow::IssystemNull() {
        return this->IsNull(this->tablecmdsys->systemColumn);
    };
    
    inline System::Void NewDataSet::cmdsysRow::SetsystemNull() {
        this->Item[this->tablecmdsys->systemColumn] = System::Convert::DBNull;
    };
    
    inline System::Boolean NewDataSet::cmdsysRow::IsversionNull() {
        return this->IsNull(this->tablecmdsys->versionColumn);
    };
    
    inline System::Void NewDataSet::cmdsysRow::SetversionNull() {
        this->Item[this->tablecmdsys->versionColumn] = System::Convert::DBNull;
    };
    
    inline dias-devel::NewDataSet::_classRow *  NewDataSet::cmdsysRow::GetclassRows()[] {
        return (__try_cast<dias-devel::NewDataSet::_classRow * [] >(this->GetChildRows(this->Table->ChildRelations->Item[S"cmdsys_class"])));
    };
    
    
    
    
    inline NewDataSet::cmdsysRowChangeEvent::cmdsysRowChangeEvent(dias-devel::NewDataSet::cmdsysRow *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline dias-devel::NewDataSet::cmdsysRow *  NewDataSet::cmdsysRowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction NewDataSet::cmdsysRowChangeEvent::get_Action() {
        return this->eventAction;
    }
}
